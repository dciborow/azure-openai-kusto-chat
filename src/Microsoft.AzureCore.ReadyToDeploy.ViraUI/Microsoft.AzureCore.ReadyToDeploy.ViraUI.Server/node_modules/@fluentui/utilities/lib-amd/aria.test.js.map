{"version":3,"file":"aria.test.js","sourceRoot":"../src/","sources":["aria.test.ts"],"names":[],"mappings":";;;IAYA,QAAQ,CAAC,kBAAkB,EAAE;QAC3B,QAAQ,CAAC,gCAAgC,EAAE;YACzC,IAAM,cAAc,GAAiB;gBACnC;oBACE,WAAW,EAAE,sCAAsC;oBACnD,KAAK,EAAE;wBACL;4BACE,IAAI,EAAE,EAAE;4BACR,QAAQ,EAAE,SAAS;yBACpB;qBACF;iBACF;gBACD;oBACE,WAAW,EAAE,uDAAuD;oBACpE,KAAK,EAAE;wBACL;4BACE,IAAI,EAAE,CAAC,SAAS,CAAC;4BACjB,QAAQ,EAAE,SAAS;yBACpB;wBACD;4BACE,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;4BAC5B,QAAQ,EAAE,SAAS;yBACpB;wBACD;4BACE,IAAI,EAAE,CAAC,EAAE,CAAC;4BACV,QAAQ,EAAE,SAAS;yBACpB;wBACD;4BACE,IAAI,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC;4BACrB,QAAQ,EAAE,SAAS;yBACpB;qBACF;iBACF;gBACD;oBACE,WAAW,EAAE,sCAAsC;oBACnD,KAAK,EAAE;wBACL;4BACE,IAAI,EAAE,CAAC,MAAM,CAAC;4BACd,QAAQ,EAAE,MAAM;yBACjB;wBACD;4BACE,IAAI,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC;4BACzB,QAAQ,EAAE,MAAM;yBACjB;wBACD;4BACE,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,CAAC;4BACpC,QAAQ,EAAE,MAAM;yBACjB;wBACD;4BACE,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC;4BACtB,QAAQ,EAAE,MAAM;yBACjB;qBACF;iBACF;gBACD;oBACE,WAAW,EAAE,oDAAoD;oBACjE,KAAK,EAAE;wBACL;4BACE,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;4BACtB,QAAQ,EAAE,WAAW;yBACtB;wBACD;4BACE,IAAI,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC;4BACzB,QAAQ,EAAE,MAAM;yBACjB;wBACD;4BACE,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,CAAC;4BACpC,QAAQ,EAAE,MAAM;yBACjB;wBACD;4BACE,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC;4BACtB,QAAQ,EAAE,MAAM;yBACjB;wBACD;4BACE,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC;4BAC3B,QAAQ,EAAE,WAAW;yBACtB;wBACD;4BACE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;4BACd,QAAQ,EAAE,SAAS;yBACpB;wBACD;4BACE,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;4BAChB,QAAQ,EAAE,SAAS;yBACpB;qBACF;iBACF;aACF,CAAC;YAEF,cAAc,CAAC,OAAO,CAAC,UAAC,IAAgB;gBACtC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,QAAwB,EAAE,KAAa;oBACzD,EAAE,CAAC,IAAI,CAAC,WAAW,GAAG,UAAU,GAAG,KAAK,EAAE;wBACxC,IAAM,MAAM,GAAG,+BAAwB,eAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;wBAC1D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBAC5C,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC","sourcesContent":["import { mergeAriaAttributeValues } from './aria';\n\ninterface IMergeTestCase {\n  args: (string | undefined)[];\n  expected: string | undefined;\n}\n\ninterface IMergeTest {\n  description: string;\n  cases: IMergeTestCase[];\n}\n\ndescribe('aria utils tests', () => {\n  describe('mergeAriaAttributeValues tests', () => {\n    const mergeTestCases: IMergeTest[] = [\n      {\n        description: 'returns undefined when given no args',\n        cases: [\n          {\n            args: [],\n            expected: undefined,\n          },\n        ],\n      },\n      {\n        description: 'returns undefined when given undefined and empty args',\n        cases: [\n          {\n            args: [undefined],\n            expected: undefined,\n          },\n          {\n            args: [undefined, undefined],\n            expected: undefined,\n          },\n          {\n            args: [''],\n            expected: undefined,\n          },\n          {\n            args: [undefined, ''],\n            expected: undefined,\n          },\n        ],\n      },\n      {\n        description: 'returns arg when given one valid arg',\n        cases: [\n          {\n            args: ['arg1'],\n            expected: 'arg1',\n          },\n          {\n            args: ['arg1', undefined],\n            expected: 'arg1',\n          },\n          {\n            args: [undefined, 'arg1', undefined],\n            expected: 'arg1',\n          },\n          {\n            args: ['', 'arg1', ''],\n            expected: 'arg1',\n          },\n        ],\n      },\n      {\n        description: 'returns merged args when given multiple valid args',\n        cases: [\n          {\n            args: ['arg1', 'arg2'],\n            expected: 'arg1 arg2',\n          },\n          {\n            args: ['arg1', undefined],\n            expected: 'arg1',\n          },\n          {\n            args: [undefined, 'arg1', undefined],\n            expected: 'arg1',\n          },\n          {\n            args: ['', 'arg1', ''],\n            expected: 'arg1',\n          },\n          {\n            args: ['', 'arg1', 'arg2 '],\n            expected: 'arg1 arg2',\n          },\n          {\n            args: ['', ''],\n            expected: undefined,\n          },\n          {\n            args: [' ', ' '],\n            expected: undefined,\n          },\n        ],\n      },\n    ];\n\n    mergeTestCases.forEach((test: IMergeTest) => {\n      test.cases.forEach((testCase: IMergeTestCase, index: number) => {\n        it(test.description + ', case #' + index, () => {\n          const merged = mergeAriaAttributeValues(...testCase.args);\n          expect(merged).toEqual(testCase.expected);\n        });\n      });\n    });\n  });\n});\n"]}