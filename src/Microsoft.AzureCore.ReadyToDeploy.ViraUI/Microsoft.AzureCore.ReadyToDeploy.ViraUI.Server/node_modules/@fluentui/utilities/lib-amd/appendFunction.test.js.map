{"version":3,"file":"appendFunction.test.js","sourceRoot":"../src/","sources":["appendFunction.test.ts"],"names":[],"mappings":";;;IAEA,QAAQ,CAAC,gBAAgB,EAAE;QACzB,EAAE,CAAC,wBAAwB,EAAE;YAC3B,IAAI,OAAO,GAAG,CAAC,CAAC;YAChB,IAAM,SAAS,GAAG,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC;YAClC,IAAM,SAAS,GAAG,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC;YAClC,IAAM,SAAS,GAAG,IAAA,+BAAc,EAAC,EAAE,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;YAE3D,SAAS,EAAE,CAAC;YACZ,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6BAA6B,EAAE;YAChC,IAAI,OAAO,GAAG,CAAC,CAAC;YAChB,IAAM,SAAS,GAAG,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC;YAClC,IAAM,SAAS,GAAG,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC;YAClC,IAAM,SAAS,GAAG,IAAA,+BAAc,EAAC,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;YAE5E,SAAS,EAAE,CAAC;YACZ,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sBAAsB,EAAE;YACzB,SAAS,GAAG;gBACV,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,CAAC;YAED;gBAGE;oBAFO,YAAO,GAAG,CAAC,CAAC;oBAGjB,IAAI,CAAC,GAAG,GAAG,IAAA,+BAAc,EAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;gBACjD,CAAC;gBACM,iBAAG,GAAV;oBACE,IAAI,CAAC,OAAO,EAAE,CAAC;gBACjB,CAAC;gBACH,UAAC;YAAD,CAAC,AATD,IASC;YAED,IAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;YACtB,GAAG,CAAC,GAAG,EAAE,CAAC;YAEV,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC","sourcesContent":["import { appendFunction } from './appendFunction';\n\ndescribe('appendFunction', () => {\n  it('can append 2 functions', () => {\n    let counter = 0;\n    const function1 = () => counter++;\n    const function2 = () => counter++;\n    const function3 = appendFunction({}, function1, function2);\n\n    function3();\n    expect(counter).toEqual(2);\n  });\n\n  it('can deal with falsey values', () => {\n    let counter = 0;\n    const function1 = () => counter++;\n    const function2 = () => counter++;\n    const function3 = appendFunction({}, function1, undefined, null, function2);\n\n    function3();\n    expect(counter).toEqual(2);\n  });\n\n  it('preserves the parent', () => {\n    function add(this: { counter: number }): void {\n      this.counter++;\n    }\n\n    class Foo {\n      public counter = 0;\n\n      constructor() {\n        this.add = appendFunction(this, add, this.add);\n      }\n      public add(): void {\n        this.counter++;\n      }\n    }\n\n    const foo = new Foo();\n    foo.add();\n\n    expect(foo.counter).toEqual(2);\n  });\n});\n"]}