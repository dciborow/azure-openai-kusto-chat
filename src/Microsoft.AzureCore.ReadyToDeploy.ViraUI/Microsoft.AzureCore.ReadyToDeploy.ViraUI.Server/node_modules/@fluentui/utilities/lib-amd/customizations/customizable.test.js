define(["require", "exports", "tslib", "react", "react-dom/server", "enzyme", "./customizable", "./Customizations", "./Customizer"], function (require, exports, tslib_1, React, ReactDOM, enzyme_1, customizable_1, Customizations_1, Customizer_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Foo = /** @class */ (function (_super) {
        tslib_1.__extends(Foo, _super);
        function Foo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Foo.prototype.render = function () {
            return React.createElement("div", null, this.props.field);
        };
        Foo = tslib_1.__decorate([
            (0, customizable_1.customizable)('Foo', ['field'])
        ], Foo);
        return Foo;
    }(React.Component));
    var ConcatStyles = /** @class */ (function (_super) {
        tslib_1.__extends(ConcatStyles, _super);
        function ConcatStyles() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ConcatStyles.prototype.render = function () {
            return React.createElement("div", null);
        };
        ConcatStyles = tslib_1.__decorate([
            (0, customizable_1.customizable)('ConcatStyles', ['styles'], true)
        ], ConcatStyles);
        return ConcatStyles;
    }(React.Component));
    var OverrideStyles = /** @class */ (function (_super) {
        tslib_1.__extends(OverrideStyles, _super);
        function OverrideStyles() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        OverrideStyles.prototype.render = function () {
            return React.createElement("div", null);
        };
        OverrideStyles = tslib_1.__decorate([
            (0, customizable_1.customizable)('OverrideStyles', ['styles'])
        ], OverrideStyles);
        return OverrideStyles;
    }(React.Component));
    describe('customizable', function () {
        beforeEach(function () {
            Customizations_1.Customizations.reset();
        });
        it('can receive global customizations', function () {
            Customizations_1.Customizations.applySettings({ field: 'globalName' });
            expect(ReactDOM.renderToStaticMarkup(React.createElement(Foo, null))).toEqual('<div>globalName</div>');
        });
        it('can receive scoped customizations', function () {
            Customizations_1.Customizations.applySettings({ field: 'globalName' });
            Customizations_1.Customizations.applyScopedSettings('Foo', { field: 'scopedName' });
            expect(ReactDOM.renderToStaticMarkup(React.createElement(Foo, null))).toEqual('<div>scopedName</div>');
        });
        it('can ignore scoped customizations that do not apply', function () {
            Customizations_1.Customizations.applySettings({ field: 'globalName' });
            Customizations_1.Customizations.applyScopedSettings('Bar', { field: 'scopedName' });
            expect(ReactDOM.renderToStaticMarkup(React.createElement(Foo, null))).toEqual('<div>globalName</div>');
        });
        it('can accept props over global/scoped values', function () {
            Customizations_1.Customizations.applySettings({ field: 'globalName' });
            Customizations_1.Customizations.applyScopedSettings('Foo', { field: 'scopedName' });
            expect(ReactDOM.renderToStaticMarkup(React.createElement(Foo, { field: "name" }))).toEqual('<div>name</div>');
        });
        it('can concatenate global styles and component styles', function () {
            var globalStyles = { color: 'red', background: 'red' };
            var componentStyles = { color: 'blue' };
            Customizations_1.Customizations.applySettings({ styles: { root: globalStyles } });
            var wrapper = (0, enzyme_1.mount)(React.createElement(Customizer_1.Customizer, null,
                React.createElement(ConcatStyles, { styles: { root: componentStyles } })));
            var component = wrapper.find('ConcatStyles');
            var props = component.props();
            expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);
            expect(props.styles.root).toEqual([globalStyles, componentStyles]);
        });
        it('can concatenate scoped styles and component styles', function () {
            var scopedStyles = { color: 'green', background: 'green' };
            var componentStyles = { color: 'blue' };
            Customizations_1.Customizations.applyScopedSettings('ConcatStyles', { styles: { root: scopedStyles } });
            var wrapper = (0, enzyme_1.mount)(React.createElement(Customizer_1.Customizer, null,
                React.createElement(ConcatStyles, { styles: { root: componentStyles } })));
            var component = wrapper.find('ConcatStyles');
            var props = component.props();
            expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);
            expect(props.styles.root).toEqual([scopedStyles, componentStyles]);
        });
        it('can override global styles with component styles', function () {
            var globalStyles = { color: 'red', background: 'red' };
            var componentStyles = { color: 'blue' };
            Customizations_1.Customizations.applySettings({ styles: { root: globalStyles } });
            var wrapper = (0, enzyme_1.mount)(React.createElement(Customizer_1.Customizer, null,
                React.createElement(OverrideStyles, { styles: { root: componentStyles } })));
            var component = wrapper.find('OverrideStyles');
            var props = component.props();
            expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);
            expect(props.styles.root).toEqual(componentStyles);
        });
        it('can override scoped styles with component styles', function () {
            var scopedStyles = { color: 'green', background: 'green' };
            var componentStyles = { color: 'blue' };
            Customizations_1.Customizations.applyScopedSettings('OverrideStyles', { styles: { root: scopedStyles } });
            var wrapper = (0, enzyme_1.mount)(React.createElement(Customizer_1.Customizer, null,
                React.createElement(OverrideStyles, { styles: { root: componentStyles } })));
            var component = wrapper.find('OverrideStyles');
            var props = component.props();
            expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);
            expect(props.styles.root).toEqual(componentStyles);
        });
        it('should not mutate styles if no change to component and global styles', function () {
            var globalRootStyles = { color: 'red', background: 'red' };
            var componentRootStyles = { color: 'blue' };
            var componentStyles = { root: componentRootStyles };
            Customizations_1.Customizations.applySettings({ styles: { root: globalRootStyles } });
            var wrapper = (0, enzyme_1.mount)(React.createElement(Customizer_1.Customizer, null,
                React.createElement(ConcatStyles, { styles: componentStyles })));
            var component = wrapper.find('ConcatStyles');
            var finalStyles = component.props().styles;
            expect(Object.keys(finalStyles)).toEqual(['root', '__shadowConfig__']);
            expect(finalStyles.root).toEqual([globalRootStyles, componentRootStyles]);
            wrapper.setProps({});
            var updatedComponent = wrapper.find('ConcatStyles');
            var finalStylesAfterRerender = updatedComponent.props().styles;
            expect(finalStylesAfterRerender).toBe(finalStyles);
            expect(finalStylesAfterRerender).toEqual(finalStyles);
        });
        it('should not mutate styles if no change to component styles without global styles', function () {
            var componentStyles = { root: { color: 'blue' } };
            var wrapper = (0, enzyme_1.mount)(React.createElement(Customizer_1.Customizer, null,
                React.createElement(ConcatStyles, { styles: componentStyles })));
            var component = wrapper.find('ConcatStyles');
            var finalStyles = component.props().styles;
            expect(Object.keys(finalStyles)).toEqual(['root', '__shadowConfig__']);
            expect(finalStyles.root).toEqual(componentStyles.root);
            wrapper.setProps({});
            var updatedComponent = wrapper.find('ConcatStyles');
            var finalStylesAfterRerender = updatedComponent.props().styles;
            expect(finalStylesAfterRerender).toStrictEqual(finalStyles);
            expect(finalStylesAfterRerender).toEqual(finalStyles);
        });
        it('should update styles if component styles changed', function () {
            var globalRootStyles = { color: 'red', background: 'red' };
            var componentRootStyles = { color: 'blue' };
            var componentStyles = { root: componentRootStyles };
            Customizations_1.Customizations.applySettings({ styles: { root: globalRootStyles } });
            var wrapper = (0, enzyme_1.mount)(React.createElement(Customizer_1.Customizer, null,
                React.createElement(ConcatStyles, { styles: componentStyles })));
            var component = wrapper.find('ConcatStyles');
            var finalStyles = component.props().styles;
            expect(Object.keys(finalStyles)).toEqual(['root', '__shadowConfig__']);
            expect(finalStyles.root).toEqual([globalRootStyles, componentRootStyles]);
            var newComponentRootStyles = { color: 'red' };
            var newComponentStyles = { root: newComponentRootStyles };
            // re-render ConcatStyles with new styles
            wrapper.setProps({
                children: React.cloneElement(wrapper.props().children, { styles: newComponentStyles }),
            });
            var updatedComponent = wrapper.find('ConcatStyles');
            var finalStylesAfterRerender = updatedComponent.props().styles;
            expect(Object.keys(finalStylesAfterRerender)).toEqual(['root', '__shadowConfig__']);
            expect(finalStylesAfterRerender.root).toEqual([globalRootStyles, newComponentRootStyles]);
        });
    });
});
//# sourceMappingURL=customizable.test.js.map