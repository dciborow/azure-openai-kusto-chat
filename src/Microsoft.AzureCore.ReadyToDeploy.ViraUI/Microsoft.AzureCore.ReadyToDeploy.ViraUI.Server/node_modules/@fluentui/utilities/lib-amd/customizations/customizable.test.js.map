{"version":3,"file":"customizable.test.js","sourceRoot":"../src/","sources":["customizations/customizable.test.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable deprecation/deprecation */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom/server';\nimport { mount } from 'enzyme';\nimport { customizable } from './customizable';\nimport { Customizations } from './Customizations';\nimport { Customizer } from './Customizer';\nimport type { IStyle } from '@fluentui/merge-styles';\n\n@customizable('Foo', ['field'])\nclass Foo extends React.Component<{ field?: string }, {}> {\n  public render(): JSX.Element {\n    return <div>{this.props.field}</div>;\n  }\n}\n\ninterface IComponentStyles {\n  root: IStyle;\n}\n\ninterface IComponentProps {\n  styles: IComponentStyles;\n}\n\n@customizable('ConcatStyles', ['styles'], true)\nclass ConcatStyles extends React.Component<IComponentProps, {}> {\n  public render(): JSX.Element {\n    return <div />;\n  }\n}\n\n@customizable('OverrideStyles', ['styles'])\nclass OverrideStyles extends React.Component<IComponentProps, {}> {\n  public render(): JSX.Element {\n    return <div />;\n  }\n}\n\ndescribe('customizable', () => {\n  beforeEach(() => {\n    Customizations.reset();\n  });\n\n  it('can receive global customizations', () => {\n    Customizations.applySettings({ field: 'globalName' });\n    expect(ReactDOM.renderToStaticMarkup(<Foo />)).toEqual('<div>globalName</div>');\n  });\n\n  it('can receive scoped customizations', () => {\n    Customizations.applySettings({ field: 'globalName' });\n    Customizations.applyScopedSettings('Foo', { field: 'scopedName' });\n    expect(ReactDOM.renderToStaticMarkup(<Foo />)).toEqual('<div>scopedName</div>');\n  });\n\n  it('can ignore scoped customizations that do not apply', () => {\n    Customizations.applySettings({ field: 'globalName' });\n    Customizations.applyScopedSettings('Bar', { field: 'scopedName' });\n    expect(ReactDOM.renderToStaticMarkup(<Foo />)).toEqual('<div>globalName</div>');\n  });\n\n  it('can accept props over global/scoped values', () => {\n    Customizations.applySettings({ field: 'globalName' });\n    Customizations.applyScopedSettings('Foo', { field: 'scopedName' });\n    expect(ReactDOM.renderToStaticMarkup(<Foo field=\"name\" />)).toEqual('<div>name</div>');\n  });\n\n  it('can concatenate global styles and component styles', () => {\n    const globalStyles = { color: 'red', background: 'red' };\n    const componentStyles = { color: 'blue' };\n\n    Customizations.applySettings({ styles: { root: globalStyles } });\n    const wrapper = mount(\n      <Customizer>\n        <ConcatStyles styles={{ root: componentStyles }} />\n      </Customizer>,\n    );\n    const component = wrapper.find('ConcatStyles');\n    const props = component.props() as IComponentProps;\n    expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);\n    expect(props.styles.root).toEqual([globalStyles, componentStyles]);\n  });\n\n  it('can concatenate scoped styles and component styles', () => {\n    const scopedStyles = { color: 'green', background: 'green' };\n    const componentStyles = { color: 'blue' };\n\n    Customizations.applyScopedSettings('ConcatStyles', { styles: { root: scopedStyles } });\n    const wrapper = mount(\n      <Customizer>\n        <ConcatStyles styles={{ root: componentStyles }} />\n      </Customizer>,\n    );\n    const component = wrapper.find('ConcatStyles');\n    const props = component.props() as IComponentProps;\n    expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);\n    expect(props.styles.root).toEqual([scopedStyles, componentStyles]);\n  });\n\n  it('can override global styles with component styles', () => {\n    const globalStyles = { color: 'red', background: 'red' };\n    const componentStyles = { color: 'blue' };\n\n    Customizations.applySettings({ styles: { root: globalStyles } });\n    const wrapper = mount(\n      <Customizer>\n        <OverrideStyles styles={{ root: componentStyles }} />\n      </Customizer>,\n    );\n    const component = wrapper.find('OverrideStyles');\n    const props = component.props() as IComponentProps;\n    expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);\n    expect(props.styles.root).toEqual(componentStyles);\n  });\n\n  it('can override scoped styles with component styles', () => {\n    const scopedStyles = { color: 'green', background: 'green' };\n    const componentStyles = { color: 'blue' };\n\n    Customizations.applyScopedSettings('OverrideStyles', { styles: { root: scopedStyles } });\n    const wrapper = mount(\n      <Customizer>\n        <OverrideStyles styles={{ root: componentStyles }} />\n      </Customizer>,\n    );\n    const component = wrapper.find('OverrideStyles');\n    const props = component.props() as IComponentProps;\n    expect(Object.keys(props.styles)).toEqual(['root', '__shadowConfig__']);\n    expect(props.styles.root).toEqual(componentStyles);\n  });\n\n  it('should not mutate styles if no change to component and global styles', () => {\n    const globalRootStyles = { color: 'red', background: 'red' };\n    const componentRootStyles = { color: 'blue' };\n    const componentStyles = { root: componentRootStyles };\n\n    Customizations.applySettings({ styles: { root: globalRootStyles } });\n    const wrapper = mount(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n    const component = wrapper.find('ConcatStyles');\n    const finalStyles = (component.props() as IComponentProps).styles;\n    expect(Object.keys(finalStyles)).toEqual(['root', '__shadowConfig__']);\n    expect(finalStyles.root).toEqual([globalRootStyles, componentRootStyles]);\n\n    wrapper.setProps({});\n\n    const updatedComponent = wrapper.find('ConcatStyles');\n    const finalStylesAfterRerender = (updatedComponent.props() as IComponentProps).styles;\n    expect(finalStylesAfterRerender).toBe(finalStyles);\n    expect(finalStylesAfterRerender).toEqual(finalStyles);\n  });\n\n  it('should not mutate styles if no change to component styles without global styles', () => {\n    const componentStyles = { root: { color: 'blue' } };\n\n    const wrapper = mount(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n    const component = wrapper.find('ConcatStyles');\n    const finalStyles = (component.props() as IComponentProps).styles;\n    expect(Object.keys(finalStyles)).toEqual(['root', '__shadowConfig__']);\n    expect(finalStyles.root).toEqual(componentStyles.root);\n\n    wrapper.setProps({});\n\n    const updatedComponent = wrapper.find('ConcatStyles');\n    const finalStylesAfterRerender = (updatedComponent.props() as IComponentProps).styles;\n    expect(finalStylesAfterRerender).toStrictEqual(finalStyles);\n    expect(finalStylesAfterRerender).toEqual(finalStyles);\n  });\n\n  it('should update styles if component styles changed', () => {\n    const globalRootStyles = { color: 'red', background: 'red' };\n    const componentRootStyles = { color: 'blue' };\n    const componentStyles = { root: componentRootStyles };\n\n    Customizations.applySettings({ styles: { root: globalRootStyles } });\n    const wrapper = mount(\n      <Customizer>\n        <ConcatStyles styles={componentStyles} />\n      </Customizer>,\n    );\n    const component = wrapper.find('ConcatStyles');\n    const finalStyles = (component.props() as IComponentProps).styles;\n    expect(Object.keys(finalStyles)).toEqual(['root', '__shadowConfig__']);\n    expect(finalStyles.root).toEqual([globalRootStyles, componentRootStyles]);\n\n    const newComponentRootStyles = { color: 'red' };\n    const newComponentStyles = { root: newComponentRootStyles };\n\n    // re-render ConcatStyles with new styles\n    wrapper.setProps({\n      children: React.cloneElement(wrapper.props().children, { styles: newComponentStyles }),\n    });\n\n    const updatedComponent = wrapper.find('ConcatStyles');\n    const finalStylesAfterRerender = (updatedComponent.props() as IComponentProps).styles;\n    expect(Object.keys(finalStylesAfterRerender)).toEqual(['root', '__shadowConfig__']);\n    expect(finalStylesAfterRerender.root).toEqual([globalRootStyles, newComponentRootStyles]);\n  });\n});\n"]}