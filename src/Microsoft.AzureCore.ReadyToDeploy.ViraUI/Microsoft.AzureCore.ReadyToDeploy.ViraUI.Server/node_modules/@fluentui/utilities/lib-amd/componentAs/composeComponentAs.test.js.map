{"version":3,"file":"composeComponentAs.test.js","sourceRoot":"../src/","sources":["componentAs/composeComponentAs.test.tsx"],"names":[],"mappings":";;;IASA,IAAM,IAAI,GAAuC,UAAC,KAAoB;QACpE,OAAO,2CAAiB,KAAK,CAAC,KAAK,GAAI,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAM,UAAU,GAA0D,UACxE,KAAuC;QAE/B,IAAe,aAAa,GAAsB,KAAK,cAA3B,EAAK,YAAY,kBAAK,KAAK,EAAzD,iBAAiD,CAAF,CAAW;QAEhE,OAAO,uCAAY,GAAG,IAAE,aAAa,CAAC,CAAC,CAAC,oBAAC,aAAa,uBAAK,YAAY,EAAI,CAAC,CAAC,CAAC,IAAI,CAAO,CAAC;IAC5F,CAAC,CAAC;IAEF,IAAM,UAAU,GAA0D,UACxE,KAAuC;QAE/B,IAAe,aAAa,GAAsB,KAAK,cAA3B,EAAK,YAAY,kBAAK,KAAK,EAAzD,iBAAiD,CAAF,CAAW;QAEhE,OAAO,uCAAY,GAAG,IAAE,aAAa,CAAC,CAAC,CAAC,oBAAC,aAAa,uBAAK,YAAY,EAAI,CAAC,CAAC,CAAC,IAAI,CAAO,CAAC;IAC5F,CAAC,CAAC;IAEF,QAAQ,CAAC,oBAAoB,EAAE;QAC7B,EAAE,CAAC,2BAA2B,EAAE;YAC9B,IAAM,kBAAkB,GAAG,IAAA,uCAAkB,EAAC,UAAU,EAAE,IAAI,CAAC,CAAC;YAEhE,IAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,oBAAC,kBAAkB,IAAC,KAAK,EAAC,MAAM,GAAG,CAAC,CAAC;YAEvE,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE;YACjD,IAAM,sBAAsB,GAAG,IAAA,uCAAkB,EAAC,UAAU,EAAE,IAAA,uCAAkB,EAAC,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;YAEpG,IAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,oBAAC,sBAAsB,IAAC,KAAK,EAAC,MAAM,GAAG,CAAC,CAAC;YAE3E,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+DAA+D,EAAE;YAClE,IAAM,iBAAiB,GAAG,IAAA,uCAAkB,EAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YAErE,IAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,oBAAC,iBAAiB,IAAC,KAAK,EAAC,MAAM,EAAC,aAAa,EAAE,IAAI,GAAI,CAAC,CAAC;YAE3F,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE;YAClC,IAAM,iBAAiB,GAAG,IAAA,uCAAkB,EAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YAErE,IAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,oBAAC,iBAAiB,IAAC,KAAK,EAAC,MAAM,GAAG,CAAC,CAAC;YAEtE,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE;YACnD,IAAM,iBAAiB,GAAG,IAAA,uCAAkB,EAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YAErE,MAAM,CAAC,IAAA,uCAAkB,EAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as renderer from 'react-test-renderer';\nimport { composeComponentAs } from './composeComponentAs';\nimport type { IComponentAsProps } from '../IComponentAs';\n\ninterface IExampleProps {\n  value: string;\n}\n\nconst Base: React.ComponentType<IExampleProps> = (props: IExampleProps): JSX.Element | null => {\n  return <div data-value={props.value} />;\n};\n\nconst DecoratorA: React.ComponentType<IComponentAsProps<IExampleProps>> = (\n  props: IComponentAsProps<IExampleProps>,\n): JSX.Element | null => {\n  const { defaultRender: DefaultRender, ...exampleProps } = props;\n\n  return <div data-a=\"a\">{DefaultRender ? <DefaultRender {...exampleProps} /> : null}</div>;\n};\n\nconst DecoratorB: React.ComponentType<IComponentAsProps<IExampleProps>> = (\n  props: IComponentAsProps<IExampleProps>,\n): JSX.Element | null => {\n  const { defaultRender: DefaultRender, ...exampleProps } = props;\n\n  return <div data-b=\"b\">{DefaultRender ? <DefaultRender {...exampleProps} /> : null}</div>;\n};\n\ndescribe('composeComponentAs', () => {\n  it('passes Base to DecoratorA', () => {\n    const DecoratorAWithBase = composeComponentAs(DecoratorA, Base);\n\n    const component = renderer.create(<DecoratorAWithBase value=\"test\" />);\n\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n\n  it('passes Base to DecoratorB through DecoratorA', () => {\n    const DecoratorAAndBWithBase = composeComponentAs(DecoratorA, composeComponentAs(DecoratorB, Base));\n\n    const component = renderer.create(<DecoratorAAndBWithBase value=\"test\" />);\n\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n\n  it('passes Base as defaultRender to DecoratorB through DecoratorA', () => {\n    const DecoratorAAroundB = composeComponentAs(DecoratorA, DecoratorB);\n\n    const component = renderer.create(<DecoratorAAroundB value=\"test\" defaultRender={Base} />);\n\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n\n  it('renders without defaultRender', () => {\n    const DecoratorAAroundB = composeComponentAs(DecoratorA, DecoratorB);\n\n    const component = renderer.create(<DecoratorAAroundB value=\"test\" />);\n\n    expect(component.toJSON()).toMatchSnapshot();\n  });\n\n  it('avoids recomposing already-composed components', () => {\n    const DecoratorAAroundB = composeComponentAs(DecoratorA, DecoratorB);\n\n    expect(composeComponentAs(DecoratorA, DecoratorB)).toBe(DecoratorAAroundB);\n  });\n});\n"]}