{"version":3,"file":"rtl.test.js","sourceRoot":"../src/","sources":["rtl.test.ts"],"names":[],"mappings":"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","sourcesContent":["export {};\n\ndescribe('rtl', () => {\n  const { getRTL, setRTL } = require('./rtl');\n\n  it('can set and get the rtl setting on the server', () => {\n    setRTL(true);\n    expect(getRTL()).toEqual(true);\n\n    setRTL(false);\n    expect(getRTL()).toEqual(false);\n  });\n});\n\ndescribe('getRTL', () => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let RTL: any;\n\n  beforeEach(() => {\n    // Make use of resetModules and require to reset the internal state of rtl module.\n    // At time of writing we need to do this to force private _isRTL to be undefined so that module\n    // reads dir attributes from the document object.\n    jest.resetModules();\n    RTL = require('./rtl');\n    document.documentElement.removeAttribute('dir');\n    document.body.removeAttribute('dir');\n  });\n\n  it('defaults to false with no dir attributes', () => {\n    expect(RTL.getRTL()).toBe(false);\n  });\n\n  it('reads ltr dir attribute from documentElement', () => {\n    document.documentElement.setAttribute('dir', 'ltr');\n    expect(RTL.getRTL()).toBe(false);\n  });\n\n  it('reads rtl dir attribute from documentElement', () => {\n    document.documentElement.setAttribute('dir', 'rtl');\n    expect(RTL.getRTL()).toBe(true);\n  });\n\n  it('reads rtl dir attribute from body with higher priority than documentElement', () => {\n    document.documentElement.setAttribute('dir', 'ltr');\n    document.body.setAttribute('dir', 'rtl');\n    expect(RTL.getRTL()).toBe(true);\n  });\n\n  it('reads ltr dir attribute from body with higher priority than documentElement', () => {\n    document.documentElement.setAttribute('dir', 'rtl');\n    document.body.setAttribute('dir', 'ltr');\n    expect(RTL.getRTL()).toBe(false);\n  });\n\n  it('falls back to ltr dir attribute on documentElement', () => {\n    document.documentElement.setAttribute('dir', 'ltr');\n    expect(RTL.getRTL()).toBe(false);\n  });\n\n  it('falls back to rtl dir attribute on documentElement', () => {\n    document.documentElement.setAttribute('dir', 'rtl');\n    expect(RTL.getRTL()).toBe(true);\n  });\n\n  it('does not cause exception with null body element', () => {\n    const DOM = require('./dom/getDocument');\n    jest.spyOn(DOM, 'getDocument').mockImplementation(() => {\n      return {\n        documentElement: document.documentElement,\n        body: null,\n      };\n    });\n\n    document.documentElement.setAttribute('dir', 'rtl');\n    expect(RTL.getRTL()).toBe(true);\n\n    jest.restoreAllMocks();\n  });\n\n  describe('theme support', () => {\n    it('returns document default (ltr) when called with no theme', () => {\n      expect(RTL.getRTL()).toBeFalsy();\n    });\n\n    it('returns document default (ltr) when called theme not specifying direction', () => {\n      const theme = {};\n      expect(RTL.getRTL(theme)).toBeFalsy();\n    });\n\n    it('returns ltr when called theme specifying ltr', () => {\n      const theme = { rtl: false };\n      expect(RTL.getRTL(theme)).toBeFalsy();\n    });\n\n    it('returns rtl when called theme specifying rtl', () => {\n      const theme = { rtl: true };\n      expect(RTL.getRTL(theme)).toBeTruthy();\n    });\n  });\n});\n"]}