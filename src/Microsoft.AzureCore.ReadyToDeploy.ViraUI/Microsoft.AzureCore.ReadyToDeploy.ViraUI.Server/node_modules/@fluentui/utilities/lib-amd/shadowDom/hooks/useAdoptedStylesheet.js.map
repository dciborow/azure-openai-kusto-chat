{"version":3,"file":"useAdoptedStylesheet.js","sourceRoot":"../src/","sources":["shadowDom/hooks/useAdoptedStylesheet.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  SUPPORTS_CONSTRUCTABLE_STYLESHEETS,\n  SUPPORTS_MODIFYING_ADOPTED_STYLESHEETS,\n  Stylesheet,\n  makeShadowConfig,\n  cloneCSSStyleSheet,\n} from '@fluentui/merge-styles';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport { useMergeStylesRootStylesheets } from './useMergeStylesRootStylesheets';\nimport { useMergeStylesShadowRootContext } from './useMergeStylesShadowRoot';\nimport type { ExtendedCSSStyleSheet, InsertRuleCallback } from '@fluentui/merge-styles';\nimport type { MergeStylesShadowRootContextValue } from '../contexts/MergeStylesShadowRootContext';\n\ntype PolyfillInsertListeners = Record<string, Function>;\n\nexport type AdoptedStylesheetHook = (stylesheetKey: string) => boolean;\nexport type AdoptedStylesheetExHook = (\n  stylesheetKey: string,\n  shadowCtx: MergeStylesShadowRootContextValue | undefined,\n  rootMergeStyles: Map<string, ExtendedCSSStyleSheet>,\n  win: Window | undefined,\n) => boolean;\n\n/**\n * Use adopted stylesheets in the parent shadow root.\n */\nexport const useAdoptedStylesheet: AdoptedStylesheetHook = stylesheetKey => {\n  const shadowCtx = useMergeStylesShadowRootContext();\n  const rootMergeStyles = useMergeStylesRootStylesheets();\n  const win = useWindow();\n\n  return useAdoptedStylesheetEx(stylesheetKey, shadowCtx, rootMergeStyles, win);\n};\n\n/**\n * Optimization for specific cases like nested customizables.\n */\nexport const useAdoptedStylesheetEx: AdoptedStylesheetExHook = (stylesheetKey, shadowCtx, rootMergeStyles, win) => {\n  const polyfillInsertListners = React.useRef<PolyfillInsertListeners>({});\n\n  React.useEffect(() => {\n    if (!shadowCtx) {\n      return;\n    }\n    const polyfillListeners = polyfillInsertListners.current;\n    polyfillInsertListners.current = {};\n\n    return () => {\n      Object.keys(polyfillListeners).forEach(key => {\n        polyfillListeners[key]();\n      });\n    };\n  }, [win, stylesheetKey, shadowCtx]);\n\n  if (!shadowCtx) {\n    return false;\n  }\n\n  if (shadowCtx.shadowRoot && !shadowCtx.stylesheets.has(stylesheetKey)) {\n    const adoptableStyleSheet = rootMergeStyles.get(stylesheetKey);\n    if (adoptableStyleSheet && win?.document) {\n      adoptSheet(shadowCtx, win.document, stylesheetKey, adoptableStyleSheet, polyfillInsertListners.current);\n    }\n  }\n\n  return true;\n};\n\nconst updatePolyfillSheet = (shadowCtx: MergeStylesShadowRootContextValue, stylesheetKey: string, rule: string) => {\n  const shadowRoot = shadowCtx.shadowRoot!;\n  const style = shadowRoot.querySelector(`[data-merge-styles-stylesheet-key=\"${stylesheetKey}\"]`) as HTMLStyleElement;\n  if (style?.sheet) {\n    style.sheet.insertRule(rule);\n  }\n};\n\nconst adoptSheet = (\n  shadowCtx: MergeStylesShadowRootContextValue,\n  doc: Document,\n  stylesheetKey: string,\n  stylesheet: ExtendedCSSStyleSheet,\n  listenerRef: PolyfillInsertListeners,\n) => {\n  const shadowRoot = shadowCtx.shadowRoot!;\n\n  shadowCtx.stylesheets.set(stylesheetKey, stylesheet);\n  if (SUPPORTS_CONSTRUCTABLE_STYLESHEETS) {\n    // Maintain the sort order of Fluent style sheets\n    const prevSheets = shadowRoot.adoptedStyleSheets;\n    let i = prevSheets.length;\n    let found = i === 0;\n    while (i >= 0 && !found) {\n      i--;\n\n      const prevSheet = prevSheets[i] as ExtendedCSSStyleSheet;\n      const prevSortOrder = (prevSheet.metadata?.sortOrder as number) ?? 0;\n      const sheetSortOrder = (stylesheet.metadata?.sortOrder as number) ?? 0;\n      if (prevSheet.bucketName === 'merge-styles' && prevSortOrder < sheetSortOrder) {\n        found = true;\n      }\n    }\n\n    if (SUPPORTS_MODIFYING_ADOPTED_STYLESHEETS) {\n      // The current spec allows the `adoptedStyleSheets` array to be modified.\n      // Previous versions of the spec required a new array to be created.\n      // For more details see: https://github.com/microsoft/fast/pull/6703\n      shadowRoot.adoptedStyleSheets.splice(i + 1, 0, stylesheet);\n    } else {\n      shadowRoot.adoptedStyleSheets = [\n        ...shadowRoot.adoptedStyleSheets.slice(0, i + 1),\n        stylesheet,\n        ...shadowRoot.adoptedStyleSheets.slice(i + 1),\n      ];\n    }\n  } else {\n    const style = doc.createElement('style');\n    style.setAttribute('data-merge-styles-stylesheet-key', stylesheetKey);\n\n    const otherStyles = shadowRoot.querySelectorAll('[data-merge-styles-stylesheet-key]');\n    if (otherStyles.length > 0) {\n      shadowRoot.insertBefore(style, otherStyles[otherStyles.length - 1].nextSibling);\n    } else {\n      shadowRoot.insertBefore(style, shadowRoot.firstChild);\n    }\n\n    if (style.sheet) {\n      cloneCSSStyleSheet(stylesheet, style.sheet);\n      if (!listenerRef[stylesheetKey]) {\n        const onInsert: InsertRuleCallback = ({ key, rule }) => {\n          if (key === stylesheetKey) {\n            if (shadowCtx && rule) {\n              updatePolyfillSheet(shadowCtx, key, rule);\n            }\n          }\n        };\n        const polyfillSheet = Stylesheet.getInstance(\n          makeShadowConfig(stylesheetKey, true, doc.defaultView ?? undefined),\n        );\n        listenerRef[stylesheetKey] = polyfillSheet.onInsertRule(onInsert);\n      }\n    }\n  }\n};\n"]}