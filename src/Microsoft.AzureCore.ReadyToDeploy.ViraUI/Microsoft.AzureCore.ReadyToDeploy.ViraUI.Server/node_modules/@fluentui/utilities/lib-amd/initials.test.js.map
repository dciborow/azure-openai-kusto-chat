{"version":3,"file":"initials.test.js","sourceRoot":"../src/","sources":["initials.test.ts"],"names":[],"mappings":";;;IAEA,QAAQ,CAAC,aAAa,EAAE;QACtB,EAAE,CAAC,qBAAqB,EAAE;YACxB,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,GAAG,IAAA,sBAAW,EAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE;YAC3C,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YAC/C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE;YACpE,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;YACvD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAE7B,MAAM,GAAG,IAAA,sBAAW,EAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE;YACxD,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;YACtD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE;YACxD,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,WAAW,EAAE,KAAK,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE;YAC5D,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE;YACzD,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE;YAC7D,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yGAAyG,EAAE;YAC5G,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,4EAA4E,EAAE,KAAK,CAAC,CAAC;YAC9G,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6EAA6E,EAAE;YAChF,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,kFAAkF,EAAE,KAAK,CAAC,CAAC;YACpH,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sEAAsE,EAAE;YACzE,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;YAC7E,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0EAA0E,EAAE;YAC7E,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,uEAAuE,EAAE,KAAK,CAAC,CAAC;YACzG,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE;YACpE,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2EAA2E,EAAE;YAC9E,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAE5B,MAAM,GAAG,IAAA,sBAAW,EAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAE7B,MAAM,GAAG,IAAA,sBAAW,EAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAE7B,MAAM,GAAG,IAAA,sBAAW,EAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE;YACrD,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE;YACtD,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,GAAG,IAAA,sBAAW,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACjC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,GAAG,IAAA,sBAAW,EAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE;YACrD,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,GAAG,IAAA,sBAAW,EAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,GAAG,IAAA,sBAAW,EAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE;YACvD,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,GAAG,IAAA,sBAAW,EAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,GAAG,IAAA,sBAAW,EAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAClC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE;YACnD,IAAI,MAAM,GAAG,IAAA,sBAAW,EAAC,UAAU,EAAE,KAAK,CAAC,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,GAAG,IAAA,sBAAW,EAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,GAAG,IAAA,sBAAW,EAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,GAAG,IAAA,sBAAW,EAAC,0BAA0B,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAC9D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAE5B,MAAM,GAAG,IAAA,sBAAW,EAAC,UAAU,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAE7B,MAAM,GAAG,IAAA,sBAAW,EAAC,OAAO,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAE7B,MAAM,GAAG,IAAA,sBAAW,EAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACvC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,GAAG,IAAA,sBAAW,EAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAE7B,MAAM,GAAG,IAAA,sBAAW,EAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAE3B,MAAM,GAAG,IAAA,sBAAW,EAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAE5B,MAAM,GAAG,IAAA,sBAAW,EAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACjC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAE5B,MAAM,GAAG,IAAA,sBAAW,EAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACnC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC","sourcesContent":["import { getInitials } from './initials';\n\ndescribe('getInitials', () => {\n  it('handles null inputs', () => {\n    let result = getInitials(null, false);\n    expect(result).toEqual('');\n\n    result = getInitials(undefined, false);\n    expect(result).toEqual('');\n  });\n\n  it('calculates an expected initials in LTR', () => {\n    let result = getInitials('Kat Larrson', false);\n    expect(result).toEqual('KL');\n  });\n\n  it('calculates an expected initials in LTR for non-ASCII characters', () => {\n    let result = getInitials('Írissa Þórðardóttir', false);\n    expect(result).toEqual('ÍÞ');\n\n    result = getInitials('Øyvind Åsen', false);\n    expect(result).toEqual('ØÅ');\n  });\n\n  it('calculates an expected initials in LTR with a hypen', () => {\n    let result = getInitials('David Zearing-Goff', false);\n    expect(result).toEqual('DZ');\n  });\n\n  it('calculates an expected initials in LTR with numbers', () => {\n    let result = getInitials('4lex 5loo', false);\n    expect(result).toEqual('45');\n  });\n\n  it('calculates an expected initials in LTR with parentheses', () => {\n    let result = getInitials('David (The man) Goff', false);\n    expect(result).toEqual('DG');\n  });\n\n  it('calculates an expected initials in LTR with brackets', () => {\n    let result = getInitials('David Goff [The man]', false);\n    expect(result).toEqual('DG');\n  });\n\n  it('calculates an expected initials in LTR with curly braces', () => {\n    let result = getInitials('David {The man} Goff', false);\n    expect(result).toEqual('DG');\n  });\n\n  it('calculates an expected initials in LTR with multiple parentheses, extra spaces, and unwanted characters', () => {\n    let result = getInitials(' !@#$%^&*()=+ (Alpha) David   (The man) `~<>,./?[]{}|   Goff   (Gamma)    ', false);\n    expect(result).toEqual('DG');\n  });\n\n  it('calculates an expected initials in LTR with multiple types of unwanted text', () => {\n    let result = getInitials(' !@#$%^&*()=+ (Alpha) David   (The man) `~<>,./?[]{}|   Goff   (Gamma)  [Beta]  ', false);\n    expect(result).toEqual('DG');\n  });\n\n  it('calculates an expected initials in LTR with angled bracket enclosure', () => {\n    let result = getInitials('Kevin Jameson <Kevin.Jameson@example.com>', false);\n    expect(result).toEqual('KJ');\n  });\n\n  it('calculates an expected initials in LTR with multiple types of enclosures', () => {\n    let result = getInitials('Kevin Jameson (Kevin.Jameson@example.com) <Kevin.Jameson@example.com>', false);\n    expect(result).toEqual('KJ');\n  });\n\n  it('calculates an expected initials in RTL if one was not specified', () => {\n    let result = getInitials('Kat Larrson', true);\n    expect(result).toEqual('LK');\n  });\n\n  it('calculates an expected initials in LTR for names with multiple components', () => {\n    let result = getInitials('A', false);\n    expect(result).toEqual('A');\n\n    result = getInitials('A B', false);\n    expect(result).toEqual('AB');\n\n    result = getInitials('A B C', false);\n    expect(result).toEqual('AC');\n\n    result = getInitials('A B C D', false);\n    expect(result).toEqual('A');\n  });\n\n  it('calculates an expected initials for Arabic names', () => {\n    let result = getInitials('خسرو رحیمی', true);\n    expect(result).toEqual('');\n  });\n\n  it('calculates an expected initials for Chinese names', () => {\n    let result = getInitials('桂英', false);\n    expect(result).toEqual('');\n\n    result = getInitials('佳', false);\n    expect(result).toEqual('');\n\n    result = getInitials('宋智洋', false);\n    expect(result).toEqual('');\n  });\n\n  it('calculates an expected initials for Korean names', () => {\n    let result = getInitials('강현', false);\n    expect(result).toEqual('');\n\n    result = getInitials('최종래', false);\n    expect(result).toEqual('');\n\n    result = getInitials('남궁 성종', false);\n    expect(result).toEqual('');\n  });\n\n  it('calculates an expected initials for Japanese names', () => {\n    let result = getInitials('松田', false);\n    expect(result).toEqual('');\n\n    result = getInitials('海野', false);\n    expect(result).toEqual('');\n\n    result = getInitials('かり', false);\n    expect(result).toEqual('');\n  });\n\n  it('calculates expected initials for phone numbers', () => {\n    let result = getInitials('12345678', false);\n    expect(result).toEqual('');\n\n    result = getInitials('+1 (555) 123-4567 ext.4567', false);\n    expect(result).toEqual('');\n\n    result = getInitials('+47 12 34 56 78 (X 5678)', false);\n    expect(result).toEqual('');\n\n    result = getInitials('+47 12 34 56 78 (X 5678)', false, true);\n    expect(result).toEqual('4');\n\n    result = getInitials('47 12 34', false, true);\n    expect(result).toEqual('43');\n\n    result = getInitials('47 12', false, true);\n    expect(result).toEqual('41');\n\n    result = getInitials('1 Ext 2', false);\n    expect(result).toEqual('');\n\n    result = getInitials('James Ext 2', false);\n    expect(result).toEqual('J2');\n\n    result = getInitials('1x1', false);\n    expect(result).toEqual('');\n\n    result = getInitials('1y1', false);\n    expect(result).toEqual('1');\n\n    result = getInitials('1', false);\n    expect(result).toEqual('1');\n\n    result = getInitials('A 2', false);\n    expect(result).toEqual('A2');\n  });\n});\n"]}