{"version":3,"file":"array.test.js","sourceRoot":"../src/","sources":["array.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  findIndex,\n  find,\n  createArray,\n  removeIndex,\n  flatten,\n  replaceElement,\n  addElementAtIndex,\n  arraysEqual,\n} from './array';\n\ndescribe('array utils tests', () => {\n  describe('findIndex tests', () => {\n    it('returns -1 when there is no match in the array', () => {\n      const array = [0, 1, 2];\n      const index = findIndex(array, () => false);\n\n      expect(index).toEqual(-1);\n    });\n\n    it('should return the correct index when the predicate satisfies the condition', () => {\n      const array = [0, 1, 2];\n      const index = findIndex(array, (elem: number) => elem === 1);\n\n      expect(index).toEqual(1);\n    });\n\n    it('should return the first index when repeated elements satisfy the predicate', () => {\n      const array = [0, 1, 2, 2];\n      const index = findIndex(array, (elem: number) => elem === 2);\n\n      expect(index).toEqual(2);\n    });\n  });\n\n  describe('find tests', () => {\n    it('returns -1 when there is no match in the array', () => {\n      const array = [0, 1, 2];\n      const item = find(array, () => false);\n\n      expect(item).toEqual(undefined);\n    });\n\n    it('should return the correct item when the predicate satisfies the condition', () => {\n      const array = [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }];\n      const item = find(array, (elem: { id: number }) => elem.id === 1);\n\n      expect(item).toEqual(array[1]);\n    });\n\n    it('should return the first index when repeated elements satisfy the predicate', () => {\n      const array = [8, 9, 10, 11];\n      const item = find(array, (elem: number) => elem === 10);\n\n      expect(item).toEqual(10);\n    });\n  });\n\n  describe('createArray tests', () => {\n    it('creates an array while invoking the callback', () => {\n      let result = createArray(4, (index: number) => String.fromCharCode('a'.charCodeAt(0) + index));\n\n      expect(result).toEqual(['a', 'b', 'c', 'd']);\n    });\n  });\n\n  describe('removeIndex tests', () => {\n    it('should return a new array instead of mutating the existing array', () => {\n      const array = [0, 1, 2];\n      const result = removeIndex(array, 0);\n      expect(result).not.toBe(array);\n    });\n\n    it('should remove the first element of the array', () => {\n      const array = [0, 1, 2];\n      const result = removeIndex(array, 0);\n      expect(result).toEqual([1, 2]);\n    });\n\n    it('should remove the last element of the array', () => {\n      const array = [0, 1, 2];\n      const result = removeIndex(array, 2);\n      expect(result).toEqual([0, 1]);\n    });\n\n    it('should remove the element in the middle of the array', () => {\n      const array = [0, 1, 2];\n      const result = removeIndex(array, 1);\n      expect(result).toEqual([0, 2]);\n    });\n  });\n\n  describe('replaceElement tests', () => {\n    it('should return a new array instead of mutating the existing array', () => {\n      const array = [1, 2, 3];\n      const result = replaceElement(array, 3, 1);\n      expect(result).toEqual([1, 3, 3]);\n      expect(result).not.toBe(array);\n    });\n\n    it('should return a new array with the replaced element in the center', () => {\n      const array = ['Zero', 'One', 'Two', 'Three', 'Four'];\n      const result = replaceElement(array, 'owT', 2);\n      expect(result).toEqual(['Zero', 'One', 'owT', 'Three', 'Four']);\n    });\n\n    it('should return a new array with the first element replaced', () => {\n      const array = ['Zero', 'One', 'Two', 'Three', 'Four'];\n      const result = replaceElement(array, 'oreZ', 0);\n      expect(result).toEqual(['oreZ', 'One', 'Two', 'Three', 'Four']);\n    });\n\n    it('should return a new array with the last element replaced', () => {\n      const array = ['Zero', 'One', 'Two', 'Three', 'Four'];\n      const result = replaceElement(array, 'ruoF', 4);\n      expect(result).toEqual(['Zero', 'One', 'Two', 'Three', 'ruoF']);\n    });\n  });\n\n  describe('addElementAddIndex tests', () => {\n    it('should add an element at the start of the array', () => {\n      const array = [2, 3, 4];\n      const result = addElementAtIndex(array, 0, 1);\n      expect(result).toEqual([1, 2, 3, 4]);\n    });\n\n    it('should add an element at the end of the array', () => {\n      const array = [2, 3, 4];\n      const result = addElementAtIndex(array, 3, 5);\n      expect(result).toEqual([2, 3, 4, 5]);\n    });\n\n    it('should add the element in the middle of the array', () => {\n      const array = [2, 3, 4];\n      const result = addElementAtIndex(array, 2, 3.5);\n      expect(result).toEqual([2, 3, 3.5, 4]);\n    });\n  });\n\n  describe('flatten tests', () => {\n    it('does nothing for an empty array', () => {\n      const array: number[] = [];\n      const result = flatten(array);\n      expect(result).toEqual(array);\n    });\n\n    it('does nothing an array with a single element', () => {\n      const array = [1];\n      const result = flatten(array);\n      expect(result).toEqual(array);\n    });\n\n    it('does nothing for an array of numbers', () => {\n      const array = [1, 2, 3];\n      const result = flatten(array);\n      expect(result).toEqual(array);\n    });\n\n    it('flattens an array of arrays', () => {\n      const array = [[1, 2, 3], [4, 6, 8], [20]];\n      const result = flatten(array);\n      expect(result).toEqual([1, 2, 3, 4, 6, 8, 20]);\n    });\n\n    it('flattens an array with numbers and arrays of numbers', () => {\n      const array = [[1, 2, 3], [4, 6, 8], 20, 22, [25, 26, 28]];\n      const result = flatten(array);\n      expect(result).toEqual([1, 2, 3, 4, 6, 8, 20, 22, 25, 26, 28]);\n    });\n  });\n\n  describe('arraysEqual tests', () => {\n    it('two empty arrays are equal', () => {\n      const arr1: number[] = [];\n      const arr2: number[] = [];\n      expect(arraysEqual(arr1, arr2)).toEqual(true);\n    });\n\n    it('different length arrays are not equal', () => {\n      const arr1: number[] = [1, 2];\n      const arr2: number[] = [1];\n      expect(arraysEqual(arr1, arr2)).toEqual(false);\n    });\n\n    it('different value arrays are not equal', () => {\n      const arr1: number[] = [1, 2];\n      const arr2: number[] = [1, 3];\n      expect(arraysEqual(arr1, arr2)).toEqual(false);\n    });\n\n    it('two exact arrays are equal', () => {\n      const arr1: number[] = [1, 2, 3];\n      const arr2: number[] = [1, 2, 3];\n      expect(arraysEqual(arr1, arr2)).toEqual(true);\n    });\n  });\n});\n"]}