{"version":3,"file":"math.test.js","sourceRoot":"../src/","sources":["math.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { fitContentToBounds, calculatePrecision, precisionRound } from './math';\n\ndescribe('math', () => {\n  describe('#fitContentToBounds', () => {\n    describe('with contain', () => {\n      it('shrinks to fit horizontal', () => {\n        expect(\n          fitContentToBounds({\n            contentSize: {\n              width: 400,\n              height: 300,\n            },\n            boundsSize: {\n              width: 200,\n              height: 200,\n            },\n            mode: 'contain',\n          }),\n        ).toEqual({\n          width: 200,\n          height: 150,\n        });\n      });\n\n      it('shrinks to fit vertical', () => {\n        expect(\n          fitContentToBounds({\n            contentSize: {\n              width: 300,\n              height: 400,\n            },\n            boundsSize: {\n              width: 200,\n              height: 200,\n            },\n            mode: 'contain',\n          }),\n        ).toEqual({\n          width: 150,\n          height: 200,\n        });\n      });\n\n      it('does not expand by default', () => {\n        expect(\n          fitContentToBounds({\n            contentSize: {\n              width: 100,\n              height: 75,\n            },\n            boundsSize: {\n              width: 200,\n              height: 200,\n            },\n            mode: 'contain',\n          }),\n        ).toEqual({\n          width: 100,\n          height: 75,\n        });\n      });\n\n      it('expands if permitted', () => {\n        expect(\n          fitContentToBounds({\n            contentSize: {\n              width: 100,\n              height: 75,\n            },\n            boundsSize: {\n              width: 200,\n              height: 200,\n            },\n            mode: 'contain',\n            maxScale: 2,\n          }),\n        ).toEqual({\n          width: 200,\n          height: 150,\n        });\n      });\n    });\n\n    describe('with cover', () => {\n      it('shrinks to fit horizontal', () => {\n        expect(\n          fitContentToBounds({\n            contentSize: {\n              width: 600,\n              height: 400,\n            },\n            boundsSize: {\n              width: 200,\n              height: 200,\n            },\n            mode: 'cover',\n          }),\n        ).toEqual({\n          width: 300,\n          height: 200,\n        });\n      });\n\n      it('shrinks to fit vertical', () => {\n        expect(\n          fitContentToBounds({\n            contentSize: {\n              width: 400,\n              height: 600,\n            },\n            boundsSize: {\n              width: 200,\n              height: 200,\n            },\n            mode: 'cover',\n          }),\n        ).toEqual({\n          width: 200,\n          height: 300,\n        });\n      });\n\n      it('does not expand by default', () => {\n        expect(\n          fitContentToBounds({\n            contentSize: {\n              width: 100,\n              height: 50,\n            },\n            boundsSize: {\n              width: 200,\n              height: 200,\n            },\n            mode: 'cover',\n          }),\n        ).toEqual({\n          width: 100,\n          height: 50,\n        });\n      });\n\n      it('expands if permitted', () => {\n        expect(\n          fitContentToBounds({\n            contentSize: {\n              width: 100,\n              height: 50,\n            },\n            boundsSize: {\n              width: 200,\n              height: 200,\n            },\n            mode: 'cover',\n            maxScale: 4,\n          }),\n        ).toEqual({\n          width: 400,\n          height: 200,\n        });\n      });\n    });\n  });\n\n  describe('#calculatePrecision', () => {\n    it('caluclatePrecision should work as intended', () => {\n      expect(calculatePrecision(0)).toEqual(0);\n      expect(calculatePrecision(1)).toEqual(0);\n      expect(calculatePrecision('1')).toEqual(0);\n\n      expect(calculatePrecision(200)).toEqual(-2);\n      expect(calculatePrecision(32100012300000)).toEqual(-5);\n\n      expect(calculatePrecision(231.0)).toEqual(0);\n      expect(calculatePrecision('231.00')).toEqual(2);\n      expect(calculatePrecision(321.00002)).toEqual(5);\n      expect(calculatePrecision('321.00002')).toEqual(5);\n\n      expect(calculatePrecision(0.002)).toEqual(3);\n      expect(calculatePrecision('.002')).toEqual(3);\n    });\n  });\n\n  describe('#precisionRound', () => {\n    it('precisionRound should work as intended', () => {\n      expect(precisionRound(1234, 0)).toEqual(1234);\n      expect(precisionRound(1234, -1)).toEqual(1230);\n      expect(precisionRound(1234, -3)).toEqual(1000);\n\n      expect(precisionRound(1234.5678, 0)).toEqual(1235);\n      expect(precisionRound(1234.5678, 1)).toEqual(1234.6);\n      expect(precisionRound(1234.5678, 5)).toEqual(1234.5678);\n\n      expect(precisionRound(1234.555, 2)).toEqual(1234.56);\n      expect(precisionRound(1234.554, 2)).toEqual(1234.55);\n      expect(precisionRound(1250, -2)).toEqual(1300);\n      expect(precisionRound(1249, -2)).toEqual(1200);\n\n      // Different bases\n      expect(precisionRound(1234.5, -2, 2)).toEqual(1236);\n      expect(precisionRound(1234.5, -2, 16)).toEqual(1280);\n      expect(precisionRound(1234.5, -2, 8)).toEqual(1216);\n      expect(precisionRound(1234.5, -2, 7)).toEqual(1225);\n    });\n  });\n});\n"]}