{"version":3,"file":"Async.test.js","sourceRoot":"../src/","sources":["Async.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { Async } from './Async';\nimport type { ICancelable } from './Async';\n\ndescribe('Async', () => {\n  describe('debounce', () => {\n    // Increase count by a specific number, to test the arguments\n    // of the debounced function;\n    let callCount = 0;\n    const fnMock = (increaseCount: number) => {\n      callCount += increaseCount;\n      return callCount;\n    };\n    let fn: jest.Mock<number, [increaseCount: number], unknown>;\n    let async: Async;\n    let debouncedFn: ICancelable<typeof fn> & typeof fn;\n\n    beforeEach(() => {\n      jest.useFakeTimers();\n      fn = jest.fn(fnMock);\n      async = new Async();\n      debouncedFn = async.debounce(fn, 100);\n    });\n\n    afterEach(() => {\n      callCount = 0;\n      fn.mockClear();\n    });\n\n    it('should debounce multiple calls', () => {\n      // Mock Date.now to return each call\n      // First one is the first debouncedFn(1)\n      // Second one is debouncedFn(2)\n      // A last one will be when the timer fires after we run pending timers in jest.\n      const dateMock = jest\n        .spyOn(Date, 'now')\n        .mockImplementationOnce(() => 10)\n        .mockImplementationOnce(() => 11)\n        .mockImplementation(() => 2000);\n\n      debouncedFn(1);\n      expect(debouncedFn.pending()).toBeTruthy();\n      debouncedFn(2);\n      expect(debouncedFn.pending()).toBeTruthy();\n\n      jest.runOnlyPendingTimers();\n\n      expect(fn).toHaveBeenCalledTimes(1);\n      expect(callCount).toEqual(2);\n\n      dateMock.mockRestore();\n    });\n\n    it('should flush the last value', () => {\n      debouncedFn(10);\n      debouncedFn(20);\n      expect(debouncedFn.pending()).toBeTruthy();\n      expect(debouncedFn.flush()).toEqual(20);\n    });\n\n    it('should be marked pending as expected', () => {\n      debouncedFn(100);\n      expect(debouncedFn.pending()).toBeTruthy();\n      debouncedFn(200);\n      expect(debouncedFn.pending()).toBeTruthy();\n\n      debouncedFn.flush();\n      expect(debouncedFn.pending()).toBeFalsy();\n    });\n\n    it('should be cancellable', () => {\n      debouncedFn(1000);\n      debouncedFn.cancel();\n      expect(debouncedFn.pending()).toBeFalsy();\n      expect(debouncedFn.flush()).toBeUndefined();\n    });\n  });\n\n  describe('throttle', () => {\n    it('should throttle multiple calls', () => {\n      jest.useFakeTimers();\n\n      // Mock Date.now to return each call\n      // First one is the first throttledFn(1)\n      // Second one is throttledFn(2)\n      // A last one will be when the timer fires after we run pending timers in jest.\n      const dateMock = jest\n        .spyOn(Date, 'now')\n        .mockImplementationOnce(() => 10)\n        .mockImplementationOnce(() => 11)\n        .mockImplementation(() => 2000);\n\n      const fn = jest.fn((num: number) => num);\n      const async = new Async();\n      const throttledFn = async.throttle(fn, 1000);\n\n      let result = throttledFn(1);\n      expect(result).toBeUndefined();\n      result = throttledFn(2);\n      expect(result).toBeUndefined();\n\n      jest.runOnlyPendingTimers();\n\n      expect(fn).toHaveBeenCalledTimes(1);\n\n      dateMock.mockRestore();\n      jest.useRealTimers();\n    });\n  });\n});\n"]}