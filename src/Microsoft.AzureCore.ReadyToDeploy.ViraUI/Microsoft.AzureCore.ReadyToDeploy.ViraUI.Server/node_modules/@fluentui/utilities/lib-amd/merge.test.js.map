{"version":3,"file":"merge.test.js","sourceRoot":"../src/","sources":["merge.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { merge } from './merge';\n\ndescribe('merge', () => {\n  it('can merge', () => {\n    expect(merge<{ a: number; b: number }>({}, { a: 1, b: 0 }, { b: 2 })).toEqual({\n      a: 1,\n      b: 2,\n    });\n  });\n\n  it('can handle falsey', () => {\n    expect(\n      merge<{ a: string; b: string | undefined }>({}, null, undefined, false, { a: '1' }, { b: '2' }, { b: undefined }),\n    ).toEqual({\n      a: '1',\n      b: undefined,\n    });\n  });\n\n  it('can handle null values', () => {\n    expect(merge({}, { a: null })).toEqual({\n      a: null,\n    });\n  });\n\n  it('can handle array values', () => {\n    expect(merge({}, { a: [1, 2] })).toEqual({ a: [1, 2] });\n  });\n\n  it('can merge deeply', () => {\n    expect(merge<{ a: { c: number }; b: number }>({}, { b: 0 }, { a: { c: 1 } }, { a: { c: 2 } })).toEqual({\n      a: { c: 2 },\n      b: 0,\n    });\n  });\n\n  it('can handle cycles', () => {\n    const obj: { foo: Object | undefined } = {\n      foo: undefined,\n    };\n\n    obj.foo = obj;\n\n    expect(merge({}, obj)).toEqual({ foo: obj });\n  });\n\n  it('can handle deep cycles', () => {\n    const obj: { foo: { bar: { baz: Object | undefined } } } = {\n      foo: {\n        bar: {\n          baz: undefined,\n        },\n      },\n    };\n\n    obj.foo.bar.baz = obj;\n\n    const result = merge({}, obj);\n\n    expect(result).toEqual({ foo: { bar: { baz: obj } } });\n    expect(result.foo).not.toBe(obj.foo);\n    expect(result.foo.bar.baz).toBe(obj);\n  });\n\n  it('can handle prototype pollution', () => {\n    const obj1 = {\n      __proto__: { payload: 'malicious value' },\n      constructor: { foo: 'malicious value' },\n    };\n    // used to check it keeps other properties\n    const obj2 = {\n      __proto__: { payload: 'malicious value' },\n      prototype: { payload: 'malicious value' },\n      constructor: { foo: 'malicious value' },\n      foo: { bar: 'baz' },\n    };\n    // used to check deep cycles\n    const obj3 = {\n      __proto__: { payload: 'malicious value' },\n      constructor: { foo: 'malicious value' },\n      a: { b: 'baz', __proto__: { payload: 'malicious value' } },\n    };\n\n    expect(merge({}, obj1)).toEqual({});\n    expect(merge({}, obj2)).toEqual({ foo: { bar: 'baz' } });\n    expect(merge({}, obj1, obj2)).toEqual({ foo: { bar: 'baz' } });\n    // Checking that merge keeps target properties but doesn't merge malicious properties\n    expect(merge(obj1, obj2, obj3)).toEqual({\n      a: { b: 'baz' },\n      constructor: { foo: 'malicious value' },\n      foo: { bar: 'baz' },\n    });\n  });\n});\n"]}