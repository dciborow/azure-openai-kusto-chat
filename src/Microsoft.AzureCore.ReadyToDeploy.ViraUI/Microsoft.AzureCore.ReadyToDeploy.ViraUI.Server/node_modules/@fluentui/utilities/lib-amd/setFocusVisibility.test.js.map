{"version":3,"file":"setFocusVisibility.test.js","sourceRoot":"../src/","sources":["setFocusVisibility.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { FocusRects } from './useFocusRects';\nimport { IsFocusHiddenClassName, IsFocusVisibleClassName, setFocusVisibility } from './setFocusVisibility';\nimport * as getWindow from './dom/getWindow';\nimport { mount, ReactWrapper } from 'enzyme';\n\ndescribe('setFocusVisibility', () => {\n  let wrapper: ReactWrapper;\n  let classNames: string[] = [];\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const mockWindow: { [key: string]: any } = {\n    addEventListener: (name: string, callback: Function) => {\n      mockWindow[name] = callback;\n    },\n    removeEventListener: (name: string, callback: Function) => {\n      if (mockWindow[name] === callback) {\n        mockWindow[name] = undefined;\n      }\n    },\n    document: {\n      body: {\n        classList: {\n          contains: (name: string) => classNames.indexOf(name) > -1,\n          add: (name: string) => classNames.indexOf(name) < 0 && classNames.push(name),\n          remove: (name: string) => classNames.indexOf(name) > -1 && classNames.splice(classNames.indexOf(name), 1),\n          toggle: (name: string, val: boolean) => {\n            const hasClass = classNames.indexOf(name) > -1;\n            if (hasClass !== val) {\n              if (hasClass) {\n                classNames.splice(classNames.indexOf(name), 1);\n              } else {\n                classNames.push(name);\n              }\n            }\n          },\n        },\n      },\n    },\n  };\n  const mockTarget = {\n    ownerDocument: {\n      defaultView: mockWindow,\n    },\n  };\n\n  beforeEach(() => {\n    jest.spyOn(getWindow, 'getWindow').mockReturnValue(mockWindow as Window);\n    classNames = [];\n\n    wrapper = mount(<FocusRects />);\n  });\n\n  afterEach(() => wrapper.unmount());\n\n  it('hints to show focus', () => {\n    setFocusVisibility(true);\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n  });\n\n  it('hints to hide focus', () => {\n    setFocusVisibility(true);\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n    setFocusVisibility(false);\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(true);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(false);\n  });\n\n  it('hints to show focus with target specified', () => {\n    setFocusVisibility(true, mockTarget as Element);\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n  });\n\n  it('hints to hide focus with target specified', () => {\n    setFocusVisibility(true, mockTarget as Element);\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n    setFocusVisibility(false, mockTarget as Element);\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(true);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(false);\n  });\n});\n"]}