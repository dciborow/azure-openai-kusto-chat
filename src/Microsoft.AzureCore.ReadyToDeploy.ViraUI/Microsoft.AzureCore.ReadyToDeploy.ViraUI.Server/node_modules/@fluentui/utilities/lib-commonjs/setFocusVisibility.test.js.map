{"version":3,"file":"setFocusVisibility.test.js","sourceRoot":"../src/","sources":["setFocusVisibility.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { FocusRects } from './useFocusRects';\nimport { IsFocusHiddenClassName, IsFocusVisibleClassName, setFocusVisibility } from './setFocusVisibility';\nimport * as getWindow from './dom/getWindow';\nimport { mount, ReactWrapper } from 'enzyme';\n\ndescribe('setFocusVisibility', () => {\n  let wrapper: ReactWrapper;\n  let classNames: string[] = [];\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const mockWindow: { [key: string]: any } = {\n    addEventListener: (name: string, callback: Function) => {\n      mockWindow[name] = callback;\n    },\n    removeEventListener: (name: string, callback: Function) => {\n      if (mockWindow[name] === callback) {\n        mockWindow[name] = undefined;\n      }\n    },\n    document: {\n      body: {\n        classList: {\n          contains: (name: string) => classNames.indexOf(name) > -1,\n          add: (name: string) => classNames.indexOf(name) < 0 && classNames.push(name),\n          remove: (name: string) => classNames.indexOf(name) > -1 && classNames.splice(classNames.indexOf(name), 1),\n          toggle: (name: string, val: boolean) => {\n            const hasClass = classNames.indexOf(name) > -1;\n            if (hasClass !== val) {\n              if (hasClass) {\n                classNames.splice(classNames.indexOf(name), 1);\n              } else {\n                classNames.push(name);\n              }\n            }\n          },\n        },\n      },\n    },\n  };\n  const mockTarget = {\n    ownerDocument: {\n      defaultView: mockWindow,\n    },\n  };\n\n  beforeEach(() => {\n    jest.spyOn(getWindow, 'getWindow').mockReturnValue(mockWindow as Window);\n    classNames = [];\n\n    wrapper = mount(<FocusRects />);\n  });\n\n  afterEach(() => wrapper.unmount());\n\n  it('hints to show focus', () => {\n    setFocusVisibility(true);\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n  });\n\n  it('hints to hide focus', () => {\n    setFocusVisibility(true);\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n    setFocusVisibility(false);\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(true);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(false);\n  });\n\n  it('hints to show focus with target specified', () => {\n    setFocusVisibility(true, mockTarget as Element);\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n  });\n\n  it('hints to hide focus with target specified', () => {\n    setFocusVisibility(true, mockTarget as Element);\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n    setFocusVisibility(false, mockTarget as Element);\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(true);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(false);\n  });\n});\n"]}