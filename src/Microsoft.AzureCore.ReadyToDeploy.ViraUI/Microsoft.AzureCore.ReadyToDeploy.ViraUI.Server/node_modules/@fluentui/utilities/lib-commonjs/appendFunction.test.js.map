{"version":3,"file":"appendFunction.test.js","sourceRoot":"../src/","sources":["appendFunction.test.ts"],"names":[],"mappings":";;AAAA,mDAAkD;AAElD,QAAQ,CAAC,gBAAgB,EAAE;IACzB,EAAE,CAAC,wBAAwB,EAAE;QAC3B,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAM,SAAS,GAAG,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC;QAClC,IAAM,SAAS,GAAG,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC;QAClC,IAAM,SAAS,GAAG,IAAA,+BAAc,EAAC,EAAE,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;QAE3D,SAAS,EAAE,CAAC;QACZ,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE;QAChC,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,IAAM,SAAS,GAAG,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC;QAClC,IAAM,SAAS,GAAG,cAAM,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC;QAClC,IAAM,SAAS,GAAG,IAAA,+BAAc,EAAC,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;QAE5E,SAAS,EAAE,CAAC;QACZ,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE;QACzB,SAAS,GAAG;YACV,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;QAED;YAGE;gBAFO,YAAO,GAAG,CAAC,CAAC;gBAGjB,IAAI,CAAC,GAAG,GAAG,IAAA,+BAAc,EAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;YACjD,CAAC;YACM,iBAAG,GAAV;gBACE,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,CAAC;YACH,UAAC;QAAD,CAAC,AATD,IASC;QAED,IAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;QACtB,GAAG,CAAC,GAAG,EAAE,CAAC;QAEV,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { appendFunction } from './appendFunction';\n\ndescribe('appendFunction', () => {\n  it('can append 2 functions', () => {\n    let counter = 0;\n    const function1 = () => counter++;\n    const function2 = () => counter++;\n    const function3 = appendFunction({}, function1, function2);\n\n    function3();\n    expect(counter).toEqual(2);\n  });\n\n  it('can deal with falsey values', () => {\n    let counter = 0;\n    const function1 = () => counter++;\n    const function2 = () => counter++;\n    const function3 = appendFunction({}, function1, undefined, null, function2);\n\n    function3();\n    expect(counter).toEqual(2);\n  });\n\n  it('preserves the parent', () => {\n    function add(this: { counter: number }): void {\n      this.counter++;\n    }\n\n    class Foo {\n      public counter = 0;\n\n      constructor() {\n        this.add = appendFunction(this, add, this.add);\n      }\n      public add(): void {\n        this.counter++;\n      }\n    }\n\n    const foo = new Foo();\n    foo.add();\n\n    expect(foo.counter).toEqual(2);\n  });\n});\n"]}