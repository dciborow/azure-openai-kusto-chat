{"version":3,"file":"useShadowConfig.js","sourceRoot":"../src/","sources":["shadowDom/hooks/useShadowConfig.ts"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,uDAA0D;AAK1D;;;;;GAKG;AACI,IAAM,eAAe,GAAqB,UAAC,aAAa,EAAE,QAAgB,EAAE,GAAI;IAAtB,yBAAA,EAAA,gBAAgB;IAC/E,OAAO,KAAK,CAAC,OAAO,CAAC;QACnB,OAAO,IAAA,+BAAgB,EAAC,aAAa,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;IACxD,CAAC,EAAE,CAAC,aAAa,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;AACrC,CAAC,CAAC;AAJW,QAAA,eAAe,mBAI1B","sourcesContent":["import * as React from 'react';\nimport { makeShadowConfig } from '@fluentui/merge-styles';\nimport type { ShadowConfig } from '@fluentui/merge-styles';\n\nexport type ShadowConfigHook = (stylesheetKey: string, inShadow: boolean, win?: Window) => ShadowConfig;\n\n/**\n * Get a shadow config.\n * @param stylesheetKey - Globally unique key\n * @param win - Reference to the `window` global.\n * @returns ShadowConfig\n */\nexport const useShadowConfig: ShadowConfigHook = (stylesheetKey, inShadow = false, win?) => {\n  return React.useMemo(() => {\n    return makeShadowConfig(stylesheetKey, inShadow, win);\n  }, [stylesheetKey, inShadow, win]);\n};\n"]}