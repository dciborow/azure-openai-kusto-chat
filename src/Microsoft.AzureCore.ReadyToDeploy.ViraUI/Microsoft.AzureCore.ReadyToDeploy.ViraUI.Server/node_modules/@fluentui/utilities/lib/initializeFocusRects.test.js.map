{"version":3,"file":"initializeFocusRects.test.js","sourceRoot":"../src/","sources":["initializeFocusRects.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,sBAAsB,EAAE,uBAAuB,EAAE,MAAM,sBAAsB,CAAC;AACvF,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,qBAAqB,EAAE,MAAM,YAAY,CAAC;AAEnD,QAAQ,CAAC,sBAAsB,EAAE;IAC/B,IAAI,UAAU,GAAa,EAAE,CAAC;IAC9B,8DAA8D;IAC9D,IAAM,UAAU,GAA2B;QACzC,gBAAgB,EAAE,UAAC,IAAY,EAAE,QAAkB;YACjD,UAAU,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;QAC9B,CAAC;QACD,QAAQ,EAAE;YACR,IAAI,EAAE;gBACJ,SAAS,EAAE;oBACT,QAAQ,EAAE,UAAC,IAAY,IAAK,OAAA,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAA7B,CAA6B;oBACzD,GAAG,EAAE,UAAC,IAAY,IAAK,OAAA,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAArD,CAAqD;oBAC5E,MAAM,EAAE,UAAC,IAAY,IAAK,OAAA,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAA/E,CAA+E;oBACzG,MAAM,EAAE,UAAC,IAAY,EAAE,GAAY;wBACjC,IAAM,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC/C,IAAI,QAAQ,KAAK,GAAG,EAAE;4BACpB,IAAI,QAAQ,EAAE;gCACZ,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;6BAChD;iCAAM;gCACL,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;6BACvB;yBACF;oBACH,CAAC;iBACF;aACF;SACF;KACF,CAAC;IACF,IAAM,UAAU,GAAG;QACjB,aAAa,EAAE;YACb,WAAW,EAAE,UAAU;SACxB;KACF,CAAC;IAEF,UAAU,CAAC;QACT,UAAU,GAAG,EAAE,CAAC;QAChB,mDAAmD;QACnD,oBAAoB,CAAC,UAAoB,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yDAAyD,EAAE;QAC5D,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/D,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEvE,UAAU,GAAG,EAAE,CAAC;QAChB,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;QACjE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEvE,UAAU,GAAG,EAAE,CAAC;QAChB,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;QACjE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEvE,UAAU,GAAG,EAAE,CAAC;QAChB,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;QAClE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEvE,UAAU,GAAG,EAAE,CAAC;QAChB,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;QAChE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEvE,UAAU,GAAG,EAAE,CAAC;QAChB,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QACnE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEvE,UAAU,GAAG,EAAE,CAAC;QAChB,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;QACrE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEvE,UAAU,GAAG,EAAE,CAAC;QAChB,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;QACjE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEvE,UAAU,GAAG,EAAE,CAAC;QAChB,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;QAChE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6CAA6C,EAAE;QAChD,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACxE,gEAAgE;IAClE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE;QAC1C,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;QACjE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvE,UAAU,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;QAC7C,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC1E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE;QACnE,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/D,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACxE,gEAAgE;QAEhE,qBAAqB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAEnC,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/D,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { initializeFocusRects } from './initializeFocusRects';\nimport { IsFocusHiddenClassName, IsFocusVisibleClassName } from './setFocusVisibility';\nimport { KeyCodes } from './KeyCodes';\nimport { addDirectionalKeyCode } from './keyboard';\n\ndescribe('initializeFocusRects', () => {\n  let classNames: string[] = [];\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const mockWindow: { [key: string]: any } = {\n    addEventListener: (name: string, callback: Function) => {\n      mockWindow[name] = callback;\n    },\n    document: {\n      body: {\n        classList: {\n          contains: (name: string) => classNames.indexOf(name) > -1,\n          add: (name: string) => classNames.indexOf(name) < 0 && classNames.push(name),\n          remove: (name: string) => classNames.indexOf(name) > -1 && classNames.splice(classNames.indexOf(name), 1),\n          toggle: (name: string, val: boolean) => {\n            const hasClass = classNames.indexOf(name) > -1;\n            if (hasClass !== val) {\n              if (hasClass) {\n                classNames.splice(classNames.indexOf(name), 1);\n              } else {\n                classNames.push(name);\n              }\n            }\n          },\n        },\n      },\n    },\n  };\n  const mockTarget = {\n    ownerDocument: {\n      defaultView: mockWindow,\n    },\n  };\n\n  beforeEach(() => {\n    classNames = [];\n    // eslint-disable-next-line deprecation/deprecation\n    initializeFocusRects(mockWindow as Window);\n  });\n\n  it('can hint to show focus when you press a directional key', () => {\n    mockWindow.keydown({ target: mockTarget, which: KeyCodes.up });\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n\n    classNames = [];\n    mockWindow.keydown({ target: mockTarget, which: KeyCodes.down });\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n\n    classNames = [];\n    mockWindow.keydown({ target: mockTarget, which: KeyCodes.left });\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n\n    classNames = [];\n    mockWindow.keydown({ target: mockTarget, which: KeyCodes.right });\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n\n    classNames = [];\n    mockWindow.keydown({ target: mockTarget, which: KeyCodes.tab });\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n\n    classNames = [];\n    mockWindow.keydown({ target: mockTarget, which: KeyCodes.pageUp });\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n\n    classNames = [];\n    mockWindow.keydown({ target: mockTarget, which: KeyCodes.pageDown });\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n\n    classNames = [];\n    mockWindow.keydown({ target: mockTarget, which: KeyCodes.home });\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n\n    classNames = [];\n    mockWindow.keydown({ target: mockTarget, which: KeyCodes.end });\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n  });\n\n  it('no-ops when you press a non-directional key', () => {\n    mockWindow.keydown({ target: mockTarget, which: 127 });\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(false);\n    // don't care about the state of the \"hidden\" class in this case\n  });\n\n  it('can hint to hide focus on mouse click', () => {\n    mockWindow.keydown({ target: mockTarget, which: KeyCodes.down });\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n    mockWindow.mousedown({ target: mockTarget });\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(true);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(false);\n  });\n\n  it('can hint to show focus when you press a custom directional key', () => {\n    mockWindow.keydown({ target: mockTarget, which: KeyCodes.f6 });\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(false);\n    // don't care about the state of the \"hidden\" class in this case\n\n    addDirectionalKeyCode(KeyCodes.f6);\n\n    mockWindow.keydown({ target: mockTarget, which: KeyCodes.f6 });\n    expect(classNames.indexOf(IsFocusHiddenClassName) > -1).toEqual(false);\n    expect(classNames.indexOf(IsFocusVisibleClassName) > -1).toEqual(true);\n  });\n});\n"]}