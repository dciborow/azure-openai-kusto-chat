{"version":3,"file":"aria.test.js","sourceRoot":"../src/","sources":["aria.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,MAAM,QAAQ,CAAC;AAYlD,QAAQ,CAAC,kBAAkB,EAAE;IAC3B,QAAQ,CAAC,gCAAgC,EAAE;QACzC,IAAM,cAAc,GAAiB;YACnC;gBACE,WAAW,EAAE,sCAAsC;gBACnD,KAAK,EAAE;oBACL;wBACE,IAAI,EAAE,EAAE;wBACR,QAAQ,EAAE,SAAS;qBACpB;iBACF;aACF;YACD;gBACE,WAAW,EAAE,uDAAuD;gBACpE,KAAK,EAAE;oBACL;wBACE,IAAI,EAAE,CAAC,SAAS,CAAC;wBACjB,QAAQ,EAAE,SAAS;qBACpB;oBACD;wBACE,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;wBAC5B,QAAQ,EAAE,SAAS;qBACpB;oBACD;wBACE,IAAI,EAAE,CAAC,EAAE,CAAC;wBACV,QAAQ,EAAE,SAAS;qBACpB;oBACD;wBACE,IAAI,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC;wBACrB,QAAQ,EAAE,SAAS;qBACpB;iBACF;aACF;YACD;gBACE,WAAW,EAAE,sCAAsC;gBACnD,KAAK,EAAE;oBACL;wBACE,IAAI,EAAE,CAAC,MAAM,CAAC;wBACd,QAAQ,EAAE,MAAM;qBACjB;oBACD;wBACE,IAAI,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC;wBACzB,QAAQ,EAAE,MAAM;qBACjB;oBACD;wBACE,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,CAAC;wBACpC,QAAQ,EAAE,MAAM;qBACjB;oBACD;wBACE,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC;wBACtB,QAAQ,EAAE,MAAM;qBACjB;iBACF;aACF;YACD;gBACE,WAAW,EAAE,oDAAoD;gBACjE,KAAK,EAAE;oBACL;wBACE,IAAI,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;wBACtB,QAAQ,EAAE,WAAW;qBACtB;oBACD;wBACE,IAAI,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC;wBACzB,QAAQ,EAAE,MAAM;qBACjB;oBACD;wBACE,IAAI,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,CAAC;wBACpC,QAAQ,EAAE,MAAM;qBACjB;oBACD;wBACE,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC;wBACtB,QAAQ,EAAE,MAAM;qBACjB;oBACD;wBACE,IAAI,EAAE,CAAC,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC;wBAC3B,QAAQ,EAAE,WAAW;qBACtB;oBACD;wBACE,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;wBACd,QAAQ,EAAE,SAAS;qBACpB;oBACD;wBACE,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;wBAChB,QAAQ,EAAE,SAAS;qBACpB;iBACF;aACF;SACF,CAAC;QAEF,cAAc,CAAC,OAAO,CAAC,UAAC,IAAgB;YACtC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,QAAwB,EAAE,KAAa;gBACzD,EAAE,CAAC,IAAI,CAAC,WAAW,GAAG,UAAU,GAAG,KAAK,EAAE;oBACxC,IAAM,MAAM,GAAG,wBAAwB,eAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;oBAC1D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { mergeAriaAttributeValues } from './aria';\n\ninterface IMergeTestCase {\n  args: (string | undefined)[];\n  expected: string | undefined;\n}\n\ninterface IMergeTest {\n  description: string;\n  cases: IMergeTestCase[];\n}\n\ndescribe('aria utils tests', () => {\n  describe('mergeAriaAttributeValues tests', () => {\n    const mergeTestCases: IMergeTest[] = [\n      {\n        description: 'returns undefined when given no args',\n        cases: [\n          {\n            args: [],\n            expected: undefined,\n          },\n        ],\n      },\n      {\n        description: 'returns undefined when given undefined and empty args',\n        cases: [\n          {\n            args: [undefined],\n            expected: undefined,\n          },\n          {\n            args: [undefined, undefined],\n            expected: undefined,\n          },\n          {\n            args: [''],\n            expected: undefined,\n          },\n          {\n            args: [undefined, ''],\n            expected: undefined,\n          },\n        ],\n      },\n      {\n        description: 'returns arg when given one valid arg',\n        cases: [\n          {\n            args: ['arg1'],\n            expected: 'arg1',\n          },\n          {\n            args: ['arg1', undefined],\n            expected: 'arg1',\n          },\n          {\n            args: [undefined, 'arg1', undefined],\n            expected: 'arg1',\n          },\n          {\n            args: ['', 'arg1', ''],\n            expected: 'arg1',\n          },\n        ],\n      },\n      {\n        description: 'returns merged args when given multiple valid args',\n        cases: [\n          {\n            args: ['arg1', 'arg2'],\n            expected: 'arg1 arg2',\n          },\n          {\n            args: ['arg1', undefined],\n            expected: 'arg1',\n          },\n          {\n            args: [undefined, 'arg1', undefined],\n            expected: 'arg1',\n          },\n          {\n            args: ['', 'arg1', ''],\n            expected: 'arg1',\n          },\n          {\n            args: ['', 'arg1', 'arg2 '],\n            expected: 'arg1 arg2',\n          },\n          {\n            args: ['', ''],\n            expected: undefined,\n          },\n          {\n            args: [' ', ' '],\n            expected: undefined,\n          },\n        ],\n      },\n    ];\n\n    mergeTestCases.forEach((test: IMergeTest) => {\n      test.cases.forEach((testCase: IMergeTestCase, index: number) => {\n        it(test.description + ', case #' + index, () => {\n          const merged = mergeAriaAttributeValues(...testCase.args);\n          expect(merged).toEqual(testCase.expected);\n        });\n      });\n    });\n  });\n});\n"]}