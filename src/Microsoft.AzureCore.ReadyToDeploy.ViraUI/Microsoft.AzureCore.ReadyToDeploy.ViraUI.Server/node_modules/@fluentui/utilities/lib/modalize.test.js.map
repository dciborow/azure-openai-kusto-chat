{"version":3,"file":"modalize.test.js","sourceRoot":"../src/","sources":["modalize.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { modalize } from './modalize';\n\nfunction getHiddenElements() {\n  function walkTree(el: HTMLElement) {\n    if (el.getAttribute('aria-hidden') === 'true') {\n      hiddenIds.push(el.id);\n    }\n    Array.from(el.children).forEach(walkTree);\n  }\n\n  const hiddenIds: string[] = [];\n  walkTree(document.body);\n  return hiddenIds;\n}\n\ndescribe('modalize', () => {\n  afterEach(() => {\n    document.body.innerHTML = '';\n  });\n\n  const modalizeId = 'childToModalize';\n\n  it('sets and removes aria-hidden', () => {\n    document.body.innerHTML = `\n      <div id=\"root\">\n        <div id=\"parentBefore\">\n          <div id=\"parentBeforeChild\"></div>\n        </div>\n        <div id=\"parent\">\n          <div id=\"siblingBefore\">\n            <div id=\"siblingBeforeChild\"></div>\n          </div>\n          <div id=\"${modalizeId}\">\n            <div id=\"grandchild\"></div>\n          </div>\n          <div id=\"siblingAfter\">\n            <div id=\"siblingAfterChild\"></div>\n          </div>\n        </div>\n        <div id=\"parentAfter\">\n          <div id=\"parentAfterChild\"></div>\n        </div>\n      </div>\n    `;\n\n    expect(getHiddenElements()).toStrictEqual([]);\n\n    // modalize the target element, verify aria-hidden is correct on all elements\n    const child = document.getElementById(modalizeId)!;\n    const unmodalize = modalize(child);\n    expect(getHiddenElements()).toStrictEqual(['parentBefore', 'siblingBefore', 'siblingAfter', 'parentAfter']);\n\n    // unmodalize, verify aria-hidden is correct on all elements\n    unmodalize();\n    expect(getHiddenElements()).toStrictEqual([]);\n  });\n\n  it('does not remove aria-hidden from initially hidden element when unmodalizing', () => {\n    document.body.innerHTML = `\n      <div id=\"root\">\n        <div id=\"${modalizeId}\"></div>\n        <div id=\"alreadyHidden\" aria-hidden=\"true\"></div>\n        <div id=\"siblingAfter\"></div>\n      </div>\n    `;\n\n    expect(getHiddenElements()).toStrictEqual(['alreadyHidden']);\n\n    const child = document.getElementById(modalizeId)!;\n    const unmodalize = modalize(child);\n    expect(getHiddenElements()).toStrictEqual(['alreadyHidden', 'siblingAfter']);\n\n    unmodalize();\n    expect(getHiddenElements()).toStrictEqual(['alreadyHidden']);\n  });\n\n  it('handles if there is nothing to hide', () => {\n    document.body.innerHTML = `\n      <div id=\"root\">\n        <div id=\"${modalizeId}\">\n          <div id=\"grandchild\"></div>\n        </div>\n      </div>\n    `;\n\n    const child = document.getElementById(modalizeId)!;\n    const unmodalize = modalize(child);\n    expect(getHiddenElements()).toStrictEqual([]);\n\n    unmodalize();\n    expect(getHiddenElements()).toStrictEqual([]);\n  });\n\n  it('restores original aria-hidden state (false or unset)', () => {\n    document.body.innerHTML = `\n      <div id=\"siblingBefore\" aria-hidden=\"false\"></div>\n      <div id=\"${modalizeId}\"></div>\n      <div id=\"siblingAfter\"></div>\n    `;\n\n    const child = document.getElementById(modalizeId)!;\n    const unmodalize = modalize(child);\n    expect(getHiddenElements()).toStrictEqual(['siblingBefore', 'siblingAfter']);\n\n    unmodalize();\n    expect(getHiddenElements()).toStrictEqual([]);\n    expect(document.getElementById('siblingBefore')!.getAttribute('aria-hidden')).toBe('false');\n    expect(document.getElementById('siblingAfter')!.getAttribute('aria-hidden')).toBeNull();\n  });\n\n  it('handles if element is direct child of body', () => {\n    document.body.innerHTML = `\n      <div id=\"siblingBefore\"></div>\n      <div id=\"${modalizeId}\"></div>\n      <div id=\"siblingAfter\"></div>\n    `;\n\n    const child = document.getElementById(modalizeId)!;\n    const unmodalize = modalize(child);\n    expect(getHiddenElements()).toStrictEqual(['siblingBefore', 'siblingAfter']);\n\n    unmodalize();\n    expect(getHiddenElements()).toStrictEqual([]);\n  });\n\n  it('handles text nodes', () => {\n    // The text nodes can't be hidden, but at least shouldn't cause exceptions\n    document.body.innerHTML = `\n      <div id=\"siblingBefore\"></div>\n      some text\n      <div id=\"${modalizeId}\"></div>\n      some other text\n      <div id=\"siblingAfter\"></div>\n    `;\n\n    const child = document.getElementById(modalizeId)!;\n    const unmodalize = modalize(child);\n    expect(getHiddenElements()).toStrictEqual(['siblingBefore', 'siblingAfter']);\n\n    unmodalize();\n    expect(getHiddenElements()).toStrictEqual([]);\n  });\n\n  it('ignores template, script, and style tags', () => {\n    document.body.innerHTML = `\n      <script></script>\n      <style></style>\n      <template></template>\n      <div id=\"siblingBefore\"></div>\n      <div id=\"${modalizeId}\"></div>\n      <div id=\"siblingAfter\"></div>\n    `;\n\n    const child = document.getElementById(modalizeId)!;\n    const unmodalize = modalize(child);\n    expect(getHiddenElements()).toStrictEqual(['siblingBefore', 'siblingAfter']);\n\n    unmodalize();\n    expect(getHiddenElements()).toStrictEqual([]);\n  });\n});\n"]}