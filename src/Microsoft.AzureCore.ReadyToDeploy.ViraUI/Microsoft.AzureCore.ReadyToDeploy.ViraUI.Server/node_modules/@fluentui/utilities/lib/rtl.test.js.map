{"version":3,"file":"rtl.test.js","sourceRoot":"../src/","sources":["rtl.test.ts"],"names":[],"mappings":"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","sourcesContent":["export {};\n\ndescribe('rtl', () => {\n  const { getRTL, setRTL } = require('./rtl');\n\n  it('can set and get the rtl setting on the server', () => {\n    setRTL(true);\n    expect(getRTL()).toEqual(true);\n\n    setRTL(false);\n    expect(getRTL()).toEqual(false);\n  });\n});\n\ndescribe('getRTL', () => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let RTL: any;\n\n  beforeEach(() => {\n    // Make use of resetModules and require to reset the internal state of rtl module.\n    // At time of writing we need to do this to force private _isRTL to be undefined so that module\n    // reads dir attributes from the document object.\n    jest.resetModules();\n    RTL = require('./rtl');\n    document.documentElement.removeAttribute('dir');\n    document.body.removeAttribute('dir');\n  });\n\n  it('defaults to false with no dir attributes', () => {\n    expect(RTL.getRTL()).toBe(false);\n  });\n\n  it('reads ltr dir attribute from documentElement', () => {\n    document.documentElement.setAttribute('dir', 'ltr');\n    expect(RTL.getRTL()).toBe(false);\n  });\n\n  it('reads rtl dir attribute from documentElement', () => {\n    document.documentElement.setAttribute('dir', 'rtl');\n    expect(RTL.getRTL()).toBe(true);\n  });\n\n  it('reads rtl dir attribute from body with higher priority than documentElement', () => {\n    document.documentElement.setAttribute('dir', 'ltr');\n    document.body.setAttribute('dir', 'rtl');\n    expect(RTL.getRTL()).toBe(true);\n  });\n\n  it('reads ltr dir attribute from body with higher priority than documentElement', () => {\n    document.documentElement.setAttribute('dir', 'rtl');\n    document.body.setAttribute('dir', 'ltr');\n    expect(RTL.getRTL()).toBe(false);\n  });\n\n  it('falls back to ltr dir attribute on documentElement', () => {\n    document.documentElement.setAttribute('dir', 'ltr');\n    expect(RTL.getRTL()).toBe(false);\n  });\n\n  it('falls back to rtl dir attribute on documentElement', () => {\n    document.documentElement.setAttribute('dir', 'rtl');\n    expect(RTL.getRTL()).toBe(true);\n  });\n\n  it('does not cause exception with null body element', () => {\n    const DOM = require('./dom/getDocument');\n    jest.spyOn(DOM, 'getDocument').mockImplementation(() => {\n      return {\n        documentElement: document.documentElement,\n        body: null,\n      };\n    });\n\n    document.documentElement.setAttribute('dir', 'rtl');\n    expect(RTL.getRTL()).toBe(true);\n\n    jest.restoreAllMocks();\n  });\n\n  describe('theme support', () => {\n    it('returns document default (ltr) when called with no theme', () => {\n      expect(RTL.getRTL()).toBeFalsy();\n    });\n\n    it('returns document default (ltr) when called theme not specifying direction', () => {\n      const theme = {};\n      expect(RTL.getRTL(theme)).toBeFalsy();\n    });\n\n    it('returns ltr when called theme specifying ltr', () => {\n      const theme = { rtl: false };\n      expect(RTL.getRTL(theme)).toBeFalsy();\n    });\n\n    it('returns rtl when called theme specifying rtl', () => {\n      const theme = { rtl: true };\n      expect(RTL.getRTL(theme)).toBeTruthy();\n    });\n  });\n});\n"]}