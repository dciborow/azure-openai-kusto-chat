{"version":3,"file":"useAdoptedStylesheet.js","sourceRoot":"../src/","sources":["shadowDom/hooks/useAdoptedStylesheet.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  SUPPORTS_CONSTRUCTABLE_STYLESHEETS,\n  SUPPORTS_MODIFYING_ADOPTED_STYLESHEETS,\n  Stylesheet,\n  makeShadowConfig,\n  cloneCSSStyleSheet,\n} from '@fluentui/merge-styles';\nimport { useWindow } from '@fluentui/react-window-provider';\nimport { useMergeStylesRootStylesheets } from './useMergeStylesRootStylesheets';\nimport { useMergeStylesShadowRootContext } from './useMergeStylesShadowRoot';\nimport type { ExtendedCSSStyleSheet, InsertRuleCallback } from '@fluentui/merge-styles';\nimport type { MergeStylesShadowRootContextValue } from '../contexts/MergeStylesShadowRootContext';\n\ntype PolyfillInsertListeners = Record<string, Function>;\n\nexport type AdoptedStylesheetHook = (stylesheetKey: string) => boolean;\nexport type AdoptedStylesheetExHook = (\n  stylesheetKey: string,\n  shadowCtx: MergeStylesShadowRootContextValue | undefined,\n  rootMergeStyles: Map<string, ExtendedCSSStyleSheet>,\n  win: Window | undefined,\n) => boolean;\n\n/**\n * Use adopted stylesheets in the parent shadow root.\n */\nexport const useAdoptedStylesheet: AdoptedStylesheetHook = stylesheetKey => {\n  const shadowCtx = useMergeStylesShadowRootContext();\n  const rootMergeStyles = useMergeStylesRootStylesheets();\n  const win = useWindow();\n\n  return useAdoptedStylesheetEx(stylesheetKey, shadowCtx, rootMergeStyles, win);\n};\n\n/**\n * Optimization for specific cases like nested customizables.\n */\nexport const useAdoptedStylesheetEx: AdoptedStylesheetExHook = (stylesheetKey, shadowCtx, rootMergeStyles, win) => {\n  const polyfillInsertListners = React.useRef<PolyfillInsertListeners>({});\n\n  React.useEffect(() => {\n    if (!shadowCtx) {\n      return;\n    }\n    const polyfillListeners = polyfillInsertListners.current;\n    polyfillInsertListners.current = {};\n\n    return () => {\n      Object.keys(polyfillListeners).forEach(key => {\n        polyfillListeners[key]();\n      });\n    };\n  }, [win, stylesheetKey, shadowCtx]);\n\n  if (!shadowCtx) {\n    return false;\n  }\n\n  if (shadowCtx.shadowRoot && !shadowCtx.stylesheets.has(stylesheetKey)) {\n    const adoptableStyleSheet = rootMergeStyles.get(stylesheetKey);\n    if (adoptableStyleSheet && win?.document) {\n      adoptSheet(shadowCtx, win.document, stylesheetKey, adoptableStyleSheet, polyfillInsertListners.current);\n    }\n  }\n\n  return true;\n};\n\nconst updatePolyfillSheet = (shadowCtx: MergeStylesShadowRootContextValue, stylesheetKey: string, rule: string) => {\n  const shadowRoot = shadowCtx.shadowRoot!;\n  const style = shadowRoot.querySelector(`[data-merge-styles-stylesheet-key=\"${stylesheetKey}\"]`) as HTMLStyleElement;\n  if (style?.sheet) {\n    style.sheet.insertRule(rule);\n  }\n};\n\nconst adoptSheet = (\n  shadowCtx: MergeStylesShadowRootContextValue,\n  doc: Document,\n  stylesheetKey: string,\n  stylesheet: ExtendedCSSStyleSheet,\n  listenerRef: PolyfillInsertListeners,\n) => {\n  const shadowRoot = shadowCtx.shadowRoot!;\n\n  shadowCtx.stylesheets.set(stylesheetKey, stylesheet);\n  if (SUPPORTS_CONSTRUCTABLE_STYLESHEETS) {\n    // Maintain the sort order of Fluent style sheets\n    const prevSheets = shadowRoot.adoptedStyleSheets;\n    let i = prevSheets.length;\n    let found = i === 0;\n    while (i >= 0 && !found) {\n      i--;\n\n      const prevSheet = prevSheets[i] as ExtendedCSSStyleSheet;\n      const prevSortOrder = (prevSheet.metadata?.sortOrder as number) ?? 0;\n      const sheetSortOrder = (stylesheet.metadata?.sortOrder as number) ?? 0;\n      if (prevSheet.bucketName === 'merge-styles' && prevSortOrder < sheetSortOrder) {\n        found = true;\n      }\n    }\n\n    if (SUPPORTS_MODIFYING_ADOPTED_STYLESHEETS) {\n      // The current spec allows the `adoptedStyleSheets` array to be modified.\n      // Previous versions of the spec required a new array to be created.\n      // For more details see: https://github.com/microsoft/fast/pull/6703\n      shadowRoot.adoptedStyleSheets.splice(i + 1, 0, stylesheet);\n    } else {\n      shadowRoot.adoptedStyleSheets = [\n        ...shadowRoot.adoptedStyleSheets.slice(0, i + 1),\n        stylesheet,\n        ...shadowRoot.adoptedStyleSheets.slice(i + 1),\n      ];\n    }\n  } else {\n    const style = doc.createElement('style');\n    style.setAttribute('data-merge-styles-stylesheet-key', stylesheetKey);\n\n    const otherStyles = shadowRoot.querySelectorAll('[data-merge-styles-stylesheet-key]');\n    if (otherStyles.length > 0) {\n      shadowRoot.insertBefore(style, otherStyles[otherStyles.length - 1].nextSibling);\n    } else {\n      shadowRoot.insertBefore(style, shadowRoot.firstChild);\n    }\n\n    if (style.sheet) {\n      cloneCSSStyleSheet(stylesheet, style.sheet);\n      if (!listenerRef[stylesheetKey]) {\n        const onInsert: InsertRuleCallback = ({ key, rule }) => {\n          if (key === stylesheetKey) {\n            if (shadowCtx && rule) {\n              updatePolyfillSheet(shadowCtx, key, rule);\n            }\n          }\n        };\n        const polyfillSheet = Stylesheet.getInstance(\n          makeShadowConfig(stylesheetKey, true, doc.defaultView ?? undefined),\n        );\n        listenerRef[stylesheetKey] = polyfillSheet.onInsertRule(onInsert);\n      }\n    }\n  }\n};\n"]}