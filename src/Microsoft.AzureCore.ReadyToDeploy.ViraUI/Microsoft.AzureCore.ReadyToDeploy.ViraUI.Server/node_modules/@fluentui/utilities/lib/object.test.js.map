{"version":3,"file":"object.test.js","sourceRoot":"../src/","sources":["object.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { assign, filteredAssign, mapEnumByName, values, omit, shallowCompare } from './object';\n\ndescribe('shallowCompare', () => {\n  it('returns true for matching objects', () => {\n    const a = {\n      a: 1,\n      b: 'string',\n      c: {\n        d: 2,\n      },\n    };\n\n    const b = { ...a };\n\n    expect(shallowCompare(a, b)).toBeTruthy();\n  });\n\n  it('returns false when one object is a superset of the other', () => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const a: { [key: string]: any } = {\n      a: 1,\n      b: 'string',\n      c: {\n        d: 2,\n      },\n    };\n\n    const b = { ...a, e: 'extra' };\n\n    expect(shallowCompare(a, b)).toBeFalsy();\n\n    a.e = 'extra';\n    a.f = 3;\n\n    expect(shallowCompare(a, b)).toBeFalsy();\n  });\n\n  it('returns false when nested objects are not strictly equal', () => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const a: { [key: string]: any } = {\n      a: 1,\n      b: 'string',\n      c: {\n        d: 2,\n      },\n    };\n\n    const b = { ...a, c: { ...a.c } };\n\n    expect(shallowCompare(a, b)).toBeFalsy();\n  });\n\n  it('returns true for two empty objects', () => {\n    expect(shallowCompare({}, {})).toBeTruthy();\n  });\n\n  it('returns true for two falsy values', () => {\n    expect(shallowCompare(null, null)).toBeTruthy();\n    expect(shallowCompare(undefined, undefined)).toBeTruthy();\n    expect(shallowCompare(null, undefined)).toBeTruthy();\n    expect(shallowCompare(0, '')).toBeTruthy();\n    expect(shallowCompare(null, '')).toBeTruthy();\n    expect(shallowCompare(0, undefined)).toBeTruthy();\n  });\n\n  it('returns false when comparing null or undefined against an object', () => {\n    expect(shallowCompare(null, { a: 1 })).toBeFalsy();\n    expect(shallowCompare(undefined, { a: 1 })).toBeFalsy();\n  });\n});\n\ndescribe('assign', () => {\n  it('can copy an object', () => {\n    let source = {\n      a: 1,\n      b: 'string',\n      c: {\n        d: 2,\n      },\n    };\n\n    let resultTarget = {};\n    let result = assign(resultTarget, source);\n\n    expect(result).not.toBe(source);\n    expect(result).toBe(resultTarget);\n    expect(result).toEqual(source);\n  });\n});\n\ndescribe('filteredAssign', () => {\n  it('can copy an object but avoid copying some parameters', () => {\n    let source = {\n      a: 1,\n      b: 'string',\n    };\n    let result = filteredAssign((propName: string) => propName !== 'b', {}, source);\n\n    expect(result.a).toEqual(1);\n    expect(result.b).toBeUndefined();\n  });\n});\n\ndescribe('mapEnumByName', () => {\n  it('iterates over all the strings of an enum', () => {\n    enum Foo {\n      first,\n      second,\n      third,\n      fourth,\n    }\n\n    const result = mapEnumByName(Foo, (name: string) => {\n      return name;\n    });\n\n    expect(result).toEqual(['first', 'second', 'third', 'fourth']);\n  });\n\n  it('filters undefined values', () => {\n    enum Foo {\n      first,\n      second,\n      third,\n      fourth,\n    }\n\n    const result = mapEnumByName(Foo, (name: string) => {\n      if (name === 'first' || name === 'third') {\n        return name;\n      }\n\n      if (name === 'second') {\n        return undefined;\n      }\n\n      return null;\n    });\n\n    expect(result).toEqual(['first', 'third']);\n  });\n});\n\ndescribe('values', () => {\n  it('gets all values in a dictionary object', () => {\n    const obj = {\n      test: 1,\n      ing: 2,\n      '123': 3,\n    };\n    const objValues = values<number>(obj);\n    expect(objValues).toHaveLength(3);\n    expect(objValues).toContain(1);\n    expect(objValues).toContain(2);\n    expect(objValues).toContain(3);\n  });\n});\n\ndescribe('omit', () => {\n  it('can omit excluded props and leave non-excluded alone', () => {\n    expect(omit({ a: 1, b: 2 }, ['a'])).toEqual({ b: 2 });\n  });\n});\n"]}