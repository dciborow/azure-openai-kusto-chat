{"version":3,"file":"DeepPartial.js","sourceRoot":"../src/","sources":["DeepPartial.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * TypeScript type to return a deep partial object (each property can be undefined, recursively.)\n * @deprecated - This type will hit infinite type instantiation recursion. Please use {@link DeepPartialV2}\n */\nexport type DeepPartial<T> = {\n  // eslint-disable-next-line deprecation/deprecation\n  [P in keyof T]?: T[P] extends Array<infer U> ? Array<DeepPartial<U>> : T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\ninterface IDeepPartialArray<T> extends Array<DeepPartialV2<T>> {}\n\ntype DeepPartialObject<T> = {\n  [Key in keyof T]?: DeepPartialV2<T[Key]>;\n};\n\nexport type DeepPartialV2<T> = T extends Function\n  ? T\n  : T extends Array<infer U>\n  ? IDeepPartialArray<U>\n  : T extends object\n  ? DeepPartialObject<T>\n  : T;\n"]}