{"version":3,"file":"IStyleSet.js","sourceRoot":"../src/","sources":["IStyleSet.ts"],"names":[],"mappings":"","sourcesContent":["import { IStyle } from './IStyle';\nimport { IStyleFunctionOrObject, IStyleFunction } from './IStyleFunction';\nimport type { ShadowConfig } from './shadowConfig';\n\n/**\n * @deprecated Use `Exclude` provided by TypeScript instead.\n */\nexport type Diff<T extends keyof any, U extends keyof any> = ({ [P in T]: P } & { [P in U]: never } & {\n  [x: string]: never;\n})[T];\n\n/**\n * @deprecated Use the version provided by TypeScript instead.\n */\n// eslint-disable-next-line deprecation/deprecation, @typescript-eslint/naming-convention\ntype _Omit<U, K extends keyof U> = Pick<U, Diff<keyof U, K>>;\n// eslint-disable-next-line deprecation/deprecation\nexport type { _Omit as Omit };\n\n/**\n * Helper function whose role is supposed to express that regardless if T is a style object or style function,\n * it will always map to a style function.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport type __MapToFunctionType<T> = Extract<T, Function> extends never\n  ? (...args: any[]) => Partial<T>\n  : Extract<T, Function>;\n\n/**\n * Used for 'extends IStyleSetBase' type constraints when an IStyleSet type argument is needed.\n */\nexport interface IStyleSetBase {\n  [key: string]: any;\n  subComponentStyles?: any;\n}\n\n/**\n * A style set is a dictionary of display areas to IStyle objects.\n * It may optionally contain style functions for sub components in the special `subComponentStyles`\n * property.\n */\nexport type IStyleSet<TStyleSet extends IStyleSetBase = { [key: string]: any }> = {\n  // eslint-disable-next-line deprecation/deprecation\n  [P in keyof _Omit<TStyleSet, 'subComponentStyles'>]: IStyle;\n} & {\n  subComponentStyles?: { [P in keyof TStyleSet['subComponentStyles']]: IStyleFunctionOrObject<any, any> };\n} & IShadowConfig;\n\n/**\n * A concatenated style set differs from `IStyleSet` in that subComponentStyles will always be a style function.\n */\nexport type IConcatenatedStyleSet<TStyleSet extends IStyleSetBase> = {\n  // eslint-disable-next-line deprecation/deprecation\n  [P in keyof _Omit<TStyleSet, 'subComponentStyles'>]: IStyle;\n} & {\n  subComponentStyles?: { [P in keyof TStyleSet['subComponentStyles']]: IStyleFunction<any, any> };\n} & IShadowConfig;\n\n/**\n * A processed style set is one which the set of styles associated with each area has been converted\n * into a class name. Additionally, all subComponentStyles are style functions.\n */\nexport type IProcessedStyleSet<TStyleSet extends IStyleSetBase> = {\n  // eslint-disable-next-line deprecation/deprecation\n  [P in keyof _Omit<TStyleSet, 'subComponentStyles'>]: string;\n} & {\n  subComponentStyles: {\n    [P in keyof TStyleSet['subComponentStyles']]: __MapToFunctionType<\n      TStyleSet['subComponentStyles'] extends infer J ? (P extends keyof J ? J[P] : never) : never\n    >;\n  };\n} & IShadowConfig;\n\ntype IShadowConfig = {\n  __shadowConfig__?: ShadowConfig;\n};\n"]}