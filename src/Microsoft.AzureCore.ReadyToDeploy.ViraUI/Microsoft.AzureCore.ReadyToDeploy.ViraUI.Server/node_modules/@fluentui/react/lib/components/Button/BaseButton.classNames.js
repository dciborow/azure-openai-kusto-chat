import { memoizeFunction } from '../../Utilities';
import { getGlobalClassNames, mergeStyleSets } from '../../Styling';
export var ButtonGlobalClassNames = {
    msButton: 'ms-Button',
    msButtonHasMenu: 'ms-Button--hasMenu',
    msButtonIcon: 'ms-Button-icon',
    msButtonMenuIcon: 'ms-Button-menuIcon',
    msButtonLabel: 'ms-Button-label',
    msButtonDescription: 'ms-Button-description',
    msButtonScreenReaderText: 'ms-Button-screenReaderText',
    msButtonFlexContainer: 'ms-Button-flexContainer',
    msButtonTextContainer: 'ms-Button-textContainer',
};
export var getBaseButtonClassNames = memoizeFunction(function (theme, styles, className, variantClassName, iconClassName, menuIconClassName, disabled, hasMenu, checked, expanded, isSplit) {
    var _a, _b;
    var classNames = getGlobalClassNames(ButtonGlobalClassNames, theme || {});
    var isExpanded = expanded && !isSplit;
    return mergeStyleSets(styles.__shadowConfig__, {
        root: [
            classNames.msButton,
            styles.root,
            variantClassName,
            checked && ['is-checked', styles.rootChecked],
            isExpanded && [
                'is-expanded',
                styles.rootExpanded,
                (_a = {},
                    _a[":hover .".concat(classNames.msButtonIcon)] = styles.iconExpandedHovered,
                    // menuIcon falls back to rootExpandedHovered to support original behavior
                    _a[":hover .".concat(classNames.msButtonMenuIcon)] = styles.menuIconExpandedHovered || styles.rootExpandedHovered,
                    _a[':hover'] = styles.rootExpandedHovered,
                    _a),
            ],
            hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles.rootHasMenu],
            disabled && ['is-disabled', styles.rootDisabled],
            !disabled &&
                !isExpanded &&
                !checked && (_b = {
                    ':hover': styles.rootHovered
                },
                _b[":hover .".concat(classNames.msButtonLabel)] = styles.labelHovered,
                _b[":hover .".concat(classNames.msButtonIcon)] = styles.iconHovered,
                _b[":hover .".concat(classNames.msButtonDescription)] = styles.descriptionHovered,
                _b[":hover .".concat(classNames.msButtonMenuIcon)] = styles.menuIconHovered,
                _b[':focus'] = styles.rootFocused,
                _b[':active'] = styles.rootPressed,
                _b[":active .".concat(classNames.msButtonIcon)] = styles.iconPressed,
                _b[":active .".concat(classNames.msButtonDescription)] = styles.descriptionPressed,
                _b[":active .".concat(classNames.msButtonMenuIcon)] = styles.menuIconPressed,
                _b),
            disabled && checked && [styles.rootCheckedDisabled],
            !disabled &&
                checked && {
                ':hover': styles.rootCheckedHovered,
                ':active': styles.rootCheckedPressed,
            },
            className,
        ],
        flexContainer: [classNames.msButtonFlexContainer, styles.flexContainer],
        textContainer: [classNames.msButtonTextContainer, styles.textContainer],
        icon: [
            classNames.msButtonIcon,
            iconClassName,
            styles.icon,
            isExpanded && styles.iconExpanded,
            checked && styles.iconChecked,
            disabled && styles.iconDisabled,
        ],
        label: [classNames.msButtonLabel, styles.label, checked && styles.labelChecked, disabled && styles.labelDisabled],
        menuIcon: [
            classNames.msButtonMenuIcon,
            menuIconClassName,
            styles.menuIcon,
            checked && styles.menuIconChecked,
            disabled && !isSplit && styles.menuIconDisabled,
            !disabled &&
                !isExpanded &&
                !checked && {
                ':hover': styles.menuIconHovered,
                ':active': styles.menuIconPressed,
            },
            isExpanded && ['is-expanded', styles.menuIconExpanded],
        ],
        description: [
            classNames.msButtonDescription,
            styles.description,
            checked && styles.descriptionChecked,
            disabled && styles.descriptionDisabled,
        ],
        screenReaderText: [classNames.msButtonScreenReaderText, styles.screenReaderText],
    });
});
//# sourceMappingURL=BaseButton.classNames.js.map